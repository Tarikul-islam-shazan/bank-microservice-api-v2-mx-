openapi: 3.0.0

info:
  description: Meed Banking Club API for connecting to backend services.
  version: 1.0.0
  title: Meed Banking Club
  termsOfService: 'http://meedbankingclub.com/terms/'
  contact:
    email: shahwar.maiwandi@gmail.com
    name: Shahwar Maiwandi
    url: 'https://meedbankingclub.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://meedbankingclub.com/api/v1.0.0'
  - url: 'http://localhost:6064/api/v1.0.0'
tags:
  - name: app-version
    description: All operations related to App Verion
  - name: account-service
    description: All operations required for axxiome onboarding
  - name: affinity-service
    description: All Operations related to Affinity Service
  - name: bank-atm
    description: All Operations related to Bank Atm Service
  - name: bank-credential-service
    description: All Operations related to Bank Credentials Service
  - name: login-service
    description: A service that facilitates login of the user.
  - name: onboarding
    description: All operations required for meed onboarding
  - name: bill-pay-service
    description: All operations related to Bill Pay
  - name: card-service
    description: A service for cards activities
  - name: customer-service
    description: A service resposible for CRUD operations on customer information stored by the bank.
  - name: deposit-service
    description: A service for direct deposit, deposit check and deposit money
  - name: invitation-service
    description: A service sends out invitations to customers
  - name: jumio-service
    description: A service for jumio
  - name: logger-service
    description: All operations related to UI Logger
  - name: meed-service
    description: All Operations related to Meed Service
  - name: meed-share
    description: All operations related to Meed Share
  - name: p2p-service
    description: A service for p2p money request or transfer
  - name: savings-goals
    description: All operations related to Savings Goals
  - name: settings-service
    description: All operations related to Settings
  - name: transfer-service
    description: A service used to transfer money between accounts
  - name: urban-airship-service
    description: All operations related to Urban Airship Service
  - name: verification-service
    description: A service sends out verifications to prospective customers emails.
  - name: virtual-assistant
    description: All operations related to Virtual Assistant

paths:
  /login:
    post:
      tags:
        - login-service
      summary: Authenticates a users credentials and then returns all the data with account summary for that user
      description: This will validate the users credentials in the banks authentication server and then return all the account informatin with other data for that user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'

      responses:
        '200':
          description: if success
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: '5e4513c89b188c37145e5cf6'
                  applicationStatus:
                    type: string
                    example: 'application-completed'
                  applicationProgress:
                    type: string
                    example: 'registration-completed'
                  accountStatus:
                    type: string
                    example: 'account-opened'
                  language:
                    type: string
                    example: 'en_US'
                  email:
                    type: string
                    example: 'demouser@yopmail.com'
                  createdDate:
                    type: string
                    example: '2020-02-13T09:15:52.925Z'
                  updatedDate:
                    type: string
                    example: '2020-02-13T09:16:56.814Z'
                  nickname:
                    type: string
                    example: 'Meed Dummy'
                  inviter:
                    type: string
                    example: 'inviter@meedbankingclub.com'
                  bank:
                    type: string
                    example: '5c17349a8ca47446b6103696'
                  country:
                    type: string
                    example: '5ab159487fabb066abb60025'
                  username:
                    type: string
                    example: 'demouser'
                  customerId:
                    type: string
                    example: '0000000001'
                  meedRewardsEarned:
                    type: number
                    example: 0
                  configurationData:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: '5c346a4500f5b6b77d8b8ff4'
                        subCategory:
                          type: string
                          example: 'en_US'
                        category:
                          type: string
                          example: 'SuppressFeature'
                        data:
                          type: array
                          items:
                            type: object
                            properties:
                              menuName:
                                type: string
                                example: 'Home'
                              activity:
                                type: string
                                example: 'show'
                              position:
                                type: number
                                example: 1
                              imagePath:
                                type: string
                                example: ''
                              childMenus:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    menuName:
                                      type: string
                                      example: 'Home'
                                    activity:
                                      type: string
                                      example: 'show'
                                    position:
                                      type: number
                                      example: 1
                                    imagePath:
                                      type: string
                                      example: ''
                                    childMenus:
                                      type: array
                                      items:
                                        type: object
                  accountSummary:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'

        '401':
          description: Username or password is incorrect
          content:
            application/json:
              examples:
                INCORRECT_CREDENTIALS:
                  summary: 'Incorrect Credentials'
                  value:
                    code: '402'
                    message: 'Username or password is incorrect'
        '400':
          description: If account is locked
          content:
            application/json:
              examples:
                ACCOUNT_IS_LOCKED:
                  summary: 'Account Lock'
                  value:
                    code: '401'
                    message: 'Your account is locked'

  /meed/onboarding:
    post:
      tags:
        - onboarding
        - meed-service
      summary: 'Initiate the Meed onboarding process Add Email: (Step: 1)'
      description: This operation will either return an existing meed application, or create a new one if an application for the supplied email does not yet exist.
      operationId: create onboarding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingCreate'
        description: meed member application created
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          $ref: '#/components/responses/ValidationException'
    # patch:
    #   tags:
    #     - onboarding
    #   summary: Updates the Meed onboarding process
    #   description:
    #     Updates the onboarding process with additional required information in each step. The current subsequent steps of the process are as follows. With each of the examples shown in the drop down.
    #     <ol>
    #     <li>Update the application with the inviter.</li>
    #     <li>Update the application with the nickname.</li>
    #     <li>Update the application with the users selected country.</li>
    #     </ol>
    #   operationId: update onboarding
    #   responses:
    #     '200':
    #       description: successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Member'
    #     '400':
    #       description: Inviter email not valid
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           oneOf:
    #             - $ref: '#/components/schemas/OnboardingUpdateInviter'
    #             - $ref: '#/components/schemas/OnboardingUpdateUpdateNickname'
    #             - $ref: '#/components/schemas/OnboardingUpdateCountry'
    #         examples:
    #           OnboardingUpdateInviterExample:
    #             $ref: '#/components/examples/OnboardingUpdateInviterExample'
    #           OnboardingUpdateNicknameExample:
    #             $ref: '#/components/examples/OnboardingUpdateNicknameExample'
    #           OnboardingUpdateCountryExample:
    #             $ref: '#/components/examples/OnboardingUpdateCountryExample'
    #     description: meed member application created
    #     required: true

  /meed/onboarding/{memberid}:
    patch:
      # deprecated: true
      tags:
        - onboarding
        - meed-service
      summary: 'Add Nickname, Inviter and Country: (Step: 2)'
      description: This operation will add nick name for the applicant
      parameters:
        - in: 'path'
          name: 'memberid'
          required: true
          schema:
            type: string
            example: '5ab159487fabb066abb60025'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    nickname:
                      type: string
                    country:
                      type: string
                    inviter:
                      type: string
                - type: object
                  properties:
                    nickname:
                      type: string
                    country:
                      type: string
                    inviter:
                      type: string
                      example: null
                    inviterEmail:
                      type: string
                - type: object
                  properties:
                    nickname:
                      type: string
                    country:
                      type: string
                    inviter:
                      type: string
                      example: null
                    inviterCode:
                      type: string
            examples:
              DEFAULT_INVITER:
                value:
                  nickname: 'myname'
                  country: '5ab159487fabb066abb60025'
                  inviter: null

              WITH_INTIVER_EMAIL:
                value:
                  nickname: 'myname'
                  country: '5ab159487fabb066abb60025'
                  inviterEmail: 'inviter@meed.com'

              WITH_INVITER_CODE:
                value:
                  nickname: 'myname'
                  country: '5ab159487fabb066abb60025'
                  inviterCode: 'ABC123'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalServerError'

  /meed/onboarding/validate:
    get:
      deprecated: true
      tags:
        - onboarding
        - meed-service
      summary: 'Validate Referel By inviterEmail or inviterCode or default inviter (Step: 3)'
      description: |
        Validate referral inviter email or inviter code or default inviter
        ## Query Strings is required but one of these three not all
        ### 1. inviterEmail or 2. inviterCode or 3. inviter
      parameters:
        - in: 'query'
          name: 'inviterEmail'
          description: If use inviter email
          schema:
            type: string
          example: 'inviter@mail.com'
        - in: 'query'
          name: 'inviterCode'
          description: If you inviter code
          schema:
            type: string
          example: '123456'
        - in: 'query'
          name: 'inviter'
          description: If there is no inviter email or inviter code. This will get default inviter id
          schema:
            type: string
          example: 'null'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                    example: true
                  inviterId:
                    type: string
                    example: '5e09abed938f5248119fbff2'
        400:
          $ref: '#/components/responses/ValidationException'

  /meed/onboarding/countries:
    get:
      tags:
        - onboarding
        - meed-service
      description: Get all countries
      summary: 'Get all countries (Step: 5)'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: '5ab159487fabb066abb60025'
                    countryAbv:
                      type: string
                      example: 'USA'
                    countryName:
                      type: string
                      example: 'United States of America'
                    unitOfMeasure:
                      type: string
                      example: 'Imperial'
                    createdDate:
                      type: string
                      example: '2018-11-16T02:32:15.629Z'
                    updatedDate:
                      type: string
                      example: '2018-11-16T02:32:15.629Z'

  /verification:
    post:
      tags:
        - onboarding
        - verification-service
      summary: 'Creates a new email verification (Step: 7)'
      description: This will create a new verification code and sent it to the customers email
      operationId: createVerification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: meed-user@email.com
      responses:
        '204':
          description: A successful verification has been created.
        '400':
          description: 'Error'
          content:
            application/json:
              examples:
                INVALID_EMAIL_ADDRESS:
                  summary: 'Email Not Allowed'
                  value:
                    code: '1100'
                    message: 'This type of email is not allowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - onboarding
        - verification-service
      summary: 'Creates a new email verification (Step: 8)'
      description: This will create a new verification to the customer
      operationId: validateVerificationCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyVerificationRequest'
        description: meed member application created
        required: true
      responses:
        '200':
          description: A successful verification has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmailVerificationCodeResponse'
        '400':
          description: 'Error'
          content:
            application/json:
              examples:
                NO_CODE_GENERATED_FOR_THIS_EMAIL:
                  summary: 'Invalid Email'
                  value:
                    code: '1101'
                    message: 'Invalid email address'
                NEW_VERIFICATION_CODE_IS_REQUIRED:
                  summary: 'Code Required'
                  value:
                    code: '1102'
                    message: 'New verification code is required'
                EMAIL_VERIFICATION_CODE_IS_INVALID:
                  summary: 'Invalid code'
                  value:
                    code: '1103'
                    message: 'Invalid verification code'
                ACTIVATION_CODE_EXPIRED:
                  summary: 'Code Expired'
                  value:
                    code: '1104'
                    message: 'Verification code is expired'
                ALREADY_USED_VERIFICATION_CODE:
                  summary: 'Code Already Used'
                  value:
                    code: '1105'
                    message: 'This verification code is already used'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bank/onboarding/create-login:
    post:
      tags:
        - onboarding
      summary: 'Start invex onboarding (Step: 06)'
      description: Create login credential
      operationId: createLogin
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: invex
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          example: '5c17349a8ca47446b6103696'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogin'
        description: credentials created
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoginResponse'
        '409':
          description: successful operation
          content:
            application/json:
              examples:
                USER_NAME_ALREADY_EXISTS:
                  summary: 'Username Exists'
                  value:
                    code: '602'
                    message: 'Username already exists'
                CUSTOMERID_ALREADY_EXISTS:
                  summary: 'Customerid Exists'
                  value:
                    code: '603'
                    message: 'Customerid already exists'

  /jumio-web-initiate:
    post:
      tags:
        - jumio-service
        - onboarding
      summary: 'Jumio web initiate service (Step: 10)'
      operationId: webInitiate
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                callbackUrl:
                  type: string
                  example: https://meedbankingclub.com/api/v1.0.0/jumio-verification/axiomme
                customerInternalReference:
                  type: string
                  example: username
                userReference:
                  type: string
                  example: username
      responses:
        200:
          description: 'Jumio initiated successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                    example: '2019-11-04T09:17:54.617Z'
                  transactionReference:
                    type: string
                    example: 'c0a0dac6-63d5-4520-a69c-a05b8a81630e'
                  redirectUrl:
                    type: string
                    example: 'meed.netverify.com/web/v4/app?authorizationToken='
        500:
          $ref: '#/components/responses/InternalServerError'
        400:
          description: 'Jumio initiation error'
          content:
            application/json:
              examples:
                JUMIO_BAD_REQUEST:
                  summary: 'Jumio Failed'
                  value:
                    code: '2001'
                    message: 'Unable to get Jumio Data'
  /jumio-verification/{identifier}:
    post:
      tags:
        - jumio-service
      summary: This url will call by Jumio CallBack
      description: This url only called from jumio as a call back which we will provide in web-initiate route
      operationId: verification
      parameters:
        - in: path
          name: identifier
          required: true
          schema:
            type: string
            example: axiomme
      responses:
        500:
          $ref: '#/components/responses/InternalServerError'
  /jumio-retrieving-details:
    get:
      tags:
        - jumio-service
        - onboarding
      summary: 'get scan details (Step: 11)'
      operationId: retrieveDetails
      parameters:
        - in: query
          name: reference
          required: true
          schema:
            type: string
            example: 37780dd7-e231-49c1-93cb-b373c3b1233c
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Jumio retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  scanReference:
                    type: string
                  document:
                    type: object
                  transaction:
                    type: object
                    description: can have multiple key:values
                  verification:
                    type: object
                    description: can have multiple key:values
                  facemap:
                    type: object
                    description: this field is optional and can have multiple key:values
        500:
          $ref: '#/components/responses/InternalServerError'

  /meed/onboarding/countries/{countryId}/states:
    get:
      tags:
        - onboarding
        - meed-service

      summary: 'Get all states of a country (Step: 12)'
      description: This route will return all states of a country that provided in url parameter.
      operationId: getStates
      parameters:
        - in: path
          name: countryId
          required: true
          example: '5ab159487fabb066abb60025'
          schema:
            type: string
            minimum: 1
          description: Country Id
      responses:
        '200':
          description: all states
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStates'
        '404':
          $ref: '#/components/responses/NotFound'

        '500':
          $ref: '#/components/responses/InternalServerError'

  /bank/accounts:
    get:
      tags:
        - account-service
      security:
        - cookieAuth: []
      summary: Retrieve the account details for a particular user
      description: Retrieve the account details for a particular user
      operationId: getAccountSummary
      parameters:
        - in: header
          name: 'meedbankingclub-username'
          required: true
          schema:
            type: string
            example: 'myusername'
        - in: header
          name: 'meedbankingclub-bank-identifier'
          required: true
          schema:
            type: string
            example: 'mybank'
      responses:
        '200':
          description: login was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountSummaryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /bank/accounts/{accountId}/transactions:
    get:
      tags:
        - account-service
      security:
        - cookieAuth: []
      summary: Retrieve all transactions
      description: Retrieve all transactions details for a particular user from a particular account and if Query exsits then pendingTransactions will empty array []
      operationId: getTransactions
      parameters:
        - in: path
          name: accountId
          required: true
          example: 'F986404115B61ED9A4EA12D51AF9F92A'
          schema:
            type: string
            minimum: 1
          description: account number

        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          example: test-bank
          schema:
            type: string

        - in: header
          name: meedbankingclub-username
          required: true
          example: johndoe
          schema:
            type: string

        - in: query
          name: dateFrom
          required: false
          example: '09-25-2019 01:00:00.0000'
          schema:
            type: string

        - in: query
          name: dateTo
          required: false
          example: '09-25-2019 12:59:00.0000'
          schema:
            type: string

      responses:
        '200':
          description: will return array of all transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactions'
        '404':
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /cards/{customerId}:
    get:
      tags:
        - card-service
      security:
        - cookieAuth: []
      summary: Get customers cards details
      description: Gets customer card details by customer id
      operationId: getCardDetails
      parameters:
        - in: path
          name: customerId
          required: true
          example: '000000123'
          schema:
            type: string
            minimum: 1
          description: customer id

        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          example: test-bank
          schema:
            type: string

        - in: header
          name: meedbankingclub-username
          required: true
          example: johndoe
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /cards/{cardId}/{state}:
    patch:
      tags:
        - card-service
      security:
        - cookieAuth: []
      summary: Lock or Unlock Card
      description: To lock or unlock card need to pass CustomerId, CardId and State (lock or unlock). "lock" is to lock the card and "unlock" to unlock a card
      operationId: cardState
      parameters:
        - in: 'header'
          name: 'meedbankingclub-customerid'
          required: true
          example: '000000123'
          schema:
            type: string
            minimum: 1
          description: customer id

        - in: path
          name: cardId
          required: true
          example: '123456'
          schema:
            type: string
            minimum: 1
          description: card id

        - in: path
          name: state
          required: true
          example: 'lock'
          schema:
            type: string
            enum:
              - 'lock'
              - 'unlock'
            minimum: 1
          description: customer id

        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          example: test-bank
          schema:
            type: string

        - in: header
          name: meedbankingclub-username
          required: true
          example: johndoe
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  card:
                    type: string
                    example: ''
        '401':
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /customer:
    get:
      tags:
        - customer-service
      security:
        - cookieAuth: []
      summary: Gets the customers information stored by the bank
      description: Gets all PII data not stored in the meed db
      operationId: getCustomerInfo
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          example: axxiome
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          example: johndoe
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          required: true
          example: 'adadad85q5fd1q5ewf1251wq'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankCustomer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - customer-service
      security:
        - cookieAuth: []
      summary: Update customer information
      description: Customer all information is upadated by this
      operationId: updateCustomerInfo
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          example: axxiome
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          example: johndoe
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          required: true
          example: 5dad5d289ff45013a93204ff
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-id
          required: false
          description: Otp id in header
          example: 'd3747e98-5ddc-42d5-9215-63795c63a882'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-token
          required: false
          description: Otp token sent via sms
          example: '879706'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ChangeEmail'
                  - $ref: '#/components/schemas/ChangeContactNumber'
                  - $ref: '#/components/schemas/ChangeContactAddress'
                  - $ref: '#/components/schemas/ChangeCustomerName'
                  - $ref: '#/components/schemas/ChangeNickname'
              examples:
                ChangeEmailExample:
                  $ref: '#/components/examples/ChangeEmailExample'
                ChangeContactAddress:
                  $ref: '#/components/examples/ChangeContactAddressExample'
                ChangeContactNumber:
                  $ref: '#/components/examples/ChangeContactNumberExample'
                ChangeCustomerName:
                  $ref: '#/components/examples/ChangeCustomerNameExample'
                ChangeNickname:
                  $ref: '#/components/examples/ChangeNicknameExample'
        '403':
          description: opt require message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/optResponse'
        '409':
          description: 'error'
          content:
            application/json:
              examples:
                ALREADY_EXIST_MEMBER:
                  summary: 'Member Exists'
                  value:
                    code: '703'
                    message: 'Email Address already exist'
        500:
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ChangeEmailReq'
                - $ref: '#/components/schemas/ChangeContactNumberReq'
                - $ref: '#/components/schemas/ChangeContactAddressReq'
                - $ref: '#/components/schemas/ChangeCustomerNameReq'
                - $ref: '#/components/schemas/ChangeNicknameReq'
            examples:
              ChangeEmailReq:
                $ref: '#/components/examples/ChangeEmailExampleReq'
              ChangeContactAddressReq:
                $ref: '#/components/examples/ChangeContactAddressExampleReq'
              ChangeContactNumberReq:
                $ref: '#/components/examples/ChangeContactNumberExampleReq'
              ChangeCustomerNameReq:
                $ref: '#/components/examples/ChangeCustomerNameExampleReq'
              ChangeNicknameReq:
                $ref: '#/components/examples/ChangeNicknameExampleReq'
  /customer/contact-preference:
    put:
      tags:
        - customer-service
        - settings-service
      security:
        - cookieAuth: []
      summary: Update customer contact preference
      description: Customer all information is upadated by this
      operationId: updateCustomerContactPreference
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          example: axxiome
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          example: johndoe
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          required: true
          example: 5dad5d289ff45013a93204ff
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-id
          required: false
          description: Otp id in header
          example: 'd3747e98-5ddc-42d5-9215-63795c63a882'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-token
          required: false
          description: Otp token sent via sms
          example: '879706'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeContactPreference'
        '403':
          description: opt require message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/optResponse'
        500:
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ChangeContactPreferenceReq'
            examples:
              ChangeEmailReq:
                $ref: '#/components/examples/ChangeContactPreferenceExampleReq'
    get:
      tags:
        - customer-service
        - settings-service
      security:
        - cookieAuth: []
      summary: Gets contact preferences
      description: Gets contact preferences for settings
      operationId: getcontactPreferences
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          example: axxiome
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          example: johndoe
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          required: true
          example: 5dad5d289ff45013a93204ff
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-id
          required: false
          description: Otp id in header
          example: 'd3747e98-5ddc-42d5-9215-63795c63a882'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-token
          required: false
          description: Otp token sent via sms
          example: '879706'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    type:
                      type: string
                      example: 'push'
                    status:
                      type: boolean
                      example: false
        '500':
          description: Error getting contact preferences

  /bank/onboarding/identity-questions:
    get:
      tags:
        - onboarding
      summary: 'Gets the questions identity questions for both IDA and IDV (Step: 14)'
      description: Gets the idv questions from the credentials service
      operationId: getIdvQuestions
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-bank-token
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: memberId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityQuestions'
        '400':
          description: No Security Questions found
    post:
      tags:
        - onboarding
      summary: 'Gets the security questions (Step: 15)'
      description: Gets the security questions from the credentials service
      operationId: answerIdvQuestions
      parameters:
        - in: header
          name: meedbankingclub-username
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: memberId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '406':
          description: 'Error'
          content:
            application/json:
              examples:
                APPLICATION_DENIED:
                  summary: 'Application denied'
                  value:
                    code: '608'
                    message: 'Application denied'
        '400':
          description: No Security Questions found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityQuestionsRequestBody'
        description: meed member application created
        required: true

  /bank/onboarding/terms-and-conditions:
    get:
      tags:
        - onboarding
      description: 'Get all terms and conditions as pdf file'
      summary: 'Get terms of conditions (Step: 16)'
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditions'
    post:
      tags:
        - onboarding
      description: 'Accept terms and conditions'
      summary: 'Accept terms of conditions (Step: 17)'
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                processId:
                  type: string
                  description: id required by Axiomme only to correlate the user with the request
                isTermsAccepted:
                  type: boolean
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountSummaryResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Forbidden'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'

  /bank/onboarding/registration-fee:
    post:
      description: 'The user will determine how much they would like to fund each account with.'
      summary: 'Complete Registrations Fee (Step: 18)'
      tags:
        - onboarding
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          example: 5da5ae14ac5040209c8580d6
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          example: 'newuser'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationFee'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankRegistrationFeeResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /bank/onboarding/apply/general-info:
    post:
      description: 'User general information'
      summary: 'User general information (Step: 07)'
      tags:
        - onboarding
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: invex
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          example: 5da5ae14ac5040209c8580d6
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          example: '00000000011'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OnboardingCommonInfo'
                - type: object
                  properties:
                    curp:
                      type: string
                      example: 'BADD110313HCMLNS04'
                    mobileNumber:
                      type: string
                      example: '5590901810'
                    email:
                      type: string
                      example: 'userinvex01@yopmail.com'
                  required:
                    - curp
                    - mobileNumber
                    - email
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  applicationProgress:
                    type: string
                    example: 'general-info-completed'
        400:
          description: 'Errors'
          content:
            application/json:
              examples:
                REG_TYPE_INVALID:
                  summary: 'REG_TYPE_INVALID'
                  value:
                    code: '606'
                    message: 'The registration type is a not valid'
                PERSON_TYPE_INVALID:
                  summary: 'PERSON_TYPE_INVALID'
                  value:
                    code: '607'
                    message: 'The type of person does not correspond'
                CURP_LENGTH_INVALID:
                  summary: 'CURP_LENGTH_INVALID'
                  value:
                    code: '608'
                    message: 'The length of CURP is wrong'
                CUSTOMERID_LENGTH_INVALID:
                  summary: 'CUSTOMERID_LENGTH_INVALID'
                  value:
                    code: '609'
                    message: 'The length in the customerId is incorrect'
                MEED_ID_REQUIRED:
                  summary: 'MEED_ID_REQUIRED'
                  value:
                    code: '611'
                    message: 'The Meed ID is a required value'
                MEED_ID_NOT_FOUND:
                  summary: 'MEED_ID_NOT_FOUND'
                  value:
                    code: '612'
                    message: 'The Meed ID does not exist'
        409:
          description: 'Errors'
          content:
            application/json:
              examples:
                CLIENT_ALREADY_EXISTS:
                  summary: 'CLIENT_ALREADY_EXISTS'
                  value:
                    code: '604'
                    message: 'Client already exists'
                CUSTOMER_ALREADY_ASSIGNED:
                  summary: 'CUSTOMER_ALREADY_ASSIGNED'
                  value:
                    code: '605'
                    message: 'Customer has already been assigned'
                TAX_PAYER_ID_ASSIGNED:
                  summary: 'TAX_PAYER_ID_ASSIGNED'
                  value:
                    code: '610'
                    message: 'The customer with Tax Payer ID ( XXXXXX ) has been already assigned the CustID (XXXX)'
                MEED_ID_ALREADY_ASSIGNED:
                  summary: 'MEED_ID_ALREADY_ASSIGNED'
                  value:
                    code: '613'
                    message: 'The MeedID has already been assigned to another customer'

        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /bank/onboarding/{postCode}/state-city-municipality:
    get:
      description: 'Get State, City, Municipality and Suburb information'
      summary: 'Get Suburb information (Step: 08)'
      tags:
        - onboarding
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: invex
          required: true
          schema:
            type: string

        - in: path
          name: postCode
          required: true
          schema:
            type: string
            example: 11000

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    stateName:
                      type: string
                    state:
                      type: string
                    municipalityName:
                      type: string
                    municipality:
                      type: string
                    cityName:
                      type: string
                    city:
                      type: string
                    suburbName:
                      type: string
                    suburb:
                      type: string

        400:
          description: 'Errors'
          content:
            application/json:
              examples:
                POST_CODE_NOT_EXISTS:
                  summary: 'POST_CODE_NOT_EXISTS'
                  value:
                    code: '616'
                    message: 'Post code does not exist'

        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /bank/onboarding/apply/address-info:
    post:
      description: 'User address information'
      summary: 'User address information (Step: 09)'
      tags:
        - onboarding
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: invex
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          example: 5da5ae14ac5040209c8580d6
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          example: '00000000011'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - addressType
                - propertyType
                - street
                - outdoorNumber
                - interiorNumber
                - postCode
                - state
                - municipality
                - city
                - suburb
                - dateOfResidence
              properties:
                addressType:
                  type: string
                propertyType:
                  type: string
                street:
                  type: string
                outdoorNumber:
                  type: string
                interiorNumber:
                  type: string
                postCode:
                  type: string
                state:
                  type: string
                municipality:
                  type: string
                city:
                  type: string
                suburb:
                  type: string
                dateOfResidence:
                  type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  applicationProgress:
                    type: string
                    example: 'address-info-completed'
        400:
          description: 'Errors'
          content:
            application/json:
              examples:
                CUSTOMERID_NOT_EXISTS:
                  summary: 'CUSTOMERID_NOT_EXISTS'
                  value:
                    code: '617'
                    message: 'The Customer Id provided does not exist.'
                CUSTOMERID_NOT_RELATED_TO_EXISTING_CUSTOMER:
                  summary: 'CUSTOMERID_NOT_RELATED_TO_EXISTING_CUSTOMER'
                  value:
                    code: '618'
                    message: 'The Meed ID is not related to an existing customer.'
                ADDRESS_INCORRECT:
                  summary: 'ADDRESS_INCORRECT'
                  value:
                    code: '619'
                    message: 'The value for Type of Address is incorrect.'
                REAL_STATE_INCORRECT:
                  summary: 'REAL_STATE_INCORRECT'
                  value:
                    code: '620'
                    message: 'The value for Type of real Estate is incorrect.'
                POST_CODE_INCORRECT:
                  summary: 'POST_CODE_INCORRECT'
                  value:
                    code: '621'
                    message: 'The value for Zip Code is incorrect.'
                STATE_INCORRECT:
                  summary: 'STATE_INCORRECT'
                  value:
                    code: '622'
                    message: 'The value for State is incorrect.'

        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1.0.0/bank/onboarding/apply/beneficiary-info:
    post:
      description: 'User beneficiary information'
      summary: 'Beneficiary information (Step: 10)'
      tags:
        - onboarding
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: invex
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          example: 5da5ae14ac5040209c8580d6
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          example: '00000000011'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OnboardingCommonInfo'
                - type: object
                  properties:
                    relationship:
                      type: string
                      example: 'PA'
                  required:
                    - relationship
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  applicationProgress:
                    type: string
                    example: 'beneficiary-info-completed'
        409:
          description: 'Errors'
          content:
            application/json:
              examples:
                INSUFFICIENT_DATA:
                  summary: 'INSUFFICIENT_DATA'
                  value:
                    code: '623'
                    message: 'Insufficient Data'
                CLIENT_ALREADY_EXISTS:
                  summary: 'CLIENT_ALREADY_EXISTS'
                  value:
                    code: '624'
                    message: 'Client Already Exists'
                MEEDID_ALREADY_ASSIGNED:
                  summary: 'MEEDID_ALREADY_ASSIGNED'
                  value:
                    code: '625'
                    message: 'Id Meed has ALREADY been assigned to another client.'
                MEED_CUSTID_INVALID:
                  summary: 'MEED_CUSTID_INVALID'
                  value:
                    code: '626'
                    message: 'Meed Cust ID does not exist'
        500:
          $ref: '#/components/responses/InternalServerError'

  /bank/onboarding/apply/account-level:
    post:
      description: 'Set Account Level for User'
      summary: 'Set Account Level for User (Step: 11)'
      tags:
        - onboarding
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: invex
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-memberid
          example: '5da5ae14ac5040209c8580d6'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountLevel:
                  type: string
                  example: 'Full'
                  enum: ['Express', 'Full']

              required:
                - accountLevel

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Member'
                  - type: object
                    properties:
                      applicationProgress:
                        type: string
                        example: 'account-level-selected'
                      customerId:
                        type: string
                      accountLevel:
                        type: string
                        example: 'Full'
        403:
          $ref: '#/components/responses/Forbidden'

        500:
          $ref: '#/components/responses/InternalServerError'

  /bank/internal-transfer:
    get:
      tags:
        - transfer-service
      description: 'Get schedule trasfer list'
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          example: newuser
          required: true
          schema:
            type: string
      security:
        - cookieAuth: []
          HeaderAuth: []
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    schema:
                      $ref: '#/components/schemas/TransferResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - transfer-service
      description: 'Create a transfer request'
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - name: meedbankingclub-bank-identifier
          in: header
          schema:
            type: string
            example: 'axxiomebank'
          required: true
        - name: meedbankingclub-username
          in: header
          schema:
            type: string
            example: 'john.doe'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 4.0
                transferDate:
                  type: string
                  example: '2019-10-09'
                debtorAccount:
                  type: string
                  example: '4E1837598ABD1EE9B9B812D51AF9F92A'
                creditorAccount:
                  type: string
                  example: '4E1846596ABD1EE9B9B812D51AF9F92A'
                notes:
                  type: string
                  example: 'Some note'
                frequency:
                  type: string
                  example: 'Once'
                currency:
                  type: string
                  example: 'USD'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        400:
          description: 'Error'
          content:
            application/json:
              examples:
                INSUFFICIENT_BALANCE:
                  summary: 'Insufficent Balance'
                  value:
                    code: '801'
                    message: 'Insufficient balance'
                DAILY_ACCESS_LIMIT_EXCEED:
                  summary: 'Daily access limit exceed'
                  value:
                    code: '802'
                    message: 'Daily access limit exceed'
                WEEKLY_ACCESS_LIMIT_EXCEED:
                  summary: 'Weekly access limit exceed'
                  value:
                    code: '803'
                    message: 'Weekly access limit exceed'
                MONTHLY_ACCESS_LIMIT_EXCEED:
                  summary: 'Monthly access limit exceed'
                  value:
                    code: '804'
                    message: 'Monthly access limit exceed'
                DAILY_COUNTER_LIMIT_EXCEED:
                  summary: 'Daily counter limit exceed'
                  value:
                    code: '805'
                    message: 'Daily counter limit exceed'
                MONTHLY_COUNTER_LIMIT_EXCEED:
                  summary: 'Monthly counter limit exceed'
                  value:
                    code: '806'
                    message: 'Monthly counter limit exceed'
        403:
          description: 'Error'
          content:
            application/json:
              examples:
                CANNOT_BE_MODIFIED:
                  summary: 'Can not be modified'
                  value:
                    code: '807'
                    message: 'Immediate Transfers cannot be modified'
        500:
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - transfer-service
      description: 'Detele a transfer request'
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - name: meedbankingclub-bank-identifier
          in: header
          schema:
            type: string
            example: 'axxiomebank'
          required: true
        - name: meedbankingclub-username
          in: header
          schema:
            type: string
            example: 'john.doe'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 4.0
                transferDate:
                  type: string
                  example: '2019-10-09'
                debtorAccount:
                  type: string
                  example: '4E1837598ABD1EE9B9B812D51AF9F92A'
                creditorAccount:
                  type: string
                  example: '4E1846596ABD1EE9B9B812D51AF9F92A'
                notes:
                  type: string
                  example: 'Some note'
                frequency:
                  type: string
                  example: 'Once'
                currency:
                  type: string
                  example: 'USD'
                transferId:
                  type: string
                  example: '000000020778-MD01'
                previousTransferType:
                  type: string
                  example: 'Scheduled'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - transfer-service
      description: 'Detele a transfer request'
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - name: meedbankingclub-bank-identifier
          in: header
          schema:
            type: string
            example: 'axxiomebank'
          required: true
        - name: meedbankingclub-username
          in: header
          schema:
            type: string
            example: 'john.doe'
          required: true
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                type: object
                properties: {}
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /invitations/verify:
    post:
      tags:
        - invitation-service
        - meed-service
      description: Verify Invitee route to check if invitee already a member if already member then will not send invitation
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          schema:
            type: string
            example: bankname
          required: true

      requestBody:
        description: Invitee emails to verify
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  inviteeEmail:
                    type: string
                    example: invitee@email.com

      responses:
        200:
          description: This will return email lists that's are already member to we can excludes from invitation call
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    inviteeEmail:
                      type: string
                      example: alreadymember@email.com
        400:
          $ref: '#/components/responses/ValidationException'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /invitations:
    post:
      description: 'Send invitation'
      tags:
        - invitation-service
        - meed-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: header
          name: meedbankingclub-memberid
          schema:
            type: string
            example: '5e0091e59bc0afedb50344af'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  inviteeEmail:
                    type: string
                    example: 'dummy.reminder.meed@yopmail.com'
                  language:
                    type: string
                    example: 'en-us'
                  message:
                    type: string
                    example: Hi, you should join the Meed Banking Club!
      responses:
        200:
          description: 'Returned list of invite object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendInvitationResponse'
        400:
          $ref: '#/components/responses/ValidationException'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      description: 'Get the list of invitation sent by this user.'
      tags:
        - invitation-service
        - meed-service
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: header
          name: meedbankingclub-memberid
          schema:
            type: string
            example: '5e0091e59bc0afedb50344af'
          required: true
      responses:
        200:
          description: 'List of invitation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  invited:
                    type: array
                    items:
                      $ref: '#/components/schemas/InvitationResponse'

        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /bank/atm/:bankId:
    get:
      description: 'Get nearby atm list. <span style="color: red">In query their either be ''latitude'' and ''longitude'' Or ''address'' required.</span>'
      tags:
        - bank-atm
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - $ref: '#/components/parameters/AtmBankId'
        - $ref: '#/components/parameters/AtmDistance'
        - $ref: '#/components/parameters/AtmLat'
        - $ref: '#/components/parameters/AtmLong'
        - $ref: '#/components/parameters/AtmAddress'
        - $ref: '#/components/parameters/AtmType'
        - $ref: '#/components/parameters/AtmMesure'
      responses:
        200:
          description: 'Returned neaby atm list'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BankAtmReponse'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: 'Not Found'
          content:
            application/json:
              examples:
                NO_BANK_FOUND:
                  summary: 'No Bank Found'
                  value:
                    code: '1701'
                    message: 'No bank found'
                NO_ADDRESS_RESULT:
                  summary: 'No Address Found'
                  value:
                    code: '1702'
                    message: 'No location found within this address'

        500:
          $ref: '#/components/responses/InternalServerError'
  /virtual-assistant/initialize:
    get:
      description: 'Initialize virtual-assistant'
      tags:
        - virtual-assistant
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: query
          name: language
          required: true
          description: language
          example: 'en_US'
          schema:
            type: string
      responses:
        200:
          description: 'Returned the virtual assiatant intance'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VAResponse'
        400:
          description: 'error'
          content:
            application/json:
              examples:
                UNABLE_TO_INIT:
                  summary: 'Unable to initialize'
                  value:
                    code: '1901'
                    message: 'Unable to initialize vertual assistant.'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /virtual-assistant/autosuggest:
    get:
      description: 'Get auto suggestion from VA'
      tags:
        - virtual-assistant
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: query
          name: ident
          required: true
          description: The ident
          example: '3002809545314940607546'
          schema:
            type: string
        - in: query
          name: userlogid
          required: true
          description: User log id
          example: '4059449533'
          schema:
            type: string
        - in: query
          name: channel
          required: true
          description: Chat channel
          example: 'Root.App'
          schema:
            type: string
        - in: query
          name: business_area
          required: true
          description: The business area
          example: 'Root.English.Customer'
          schema:
            type: string
        - in: query
          name: entry
          required: true
          description: The message
          example: 'Hi?'
          schema:
            type: string
      responses:
        200:
          description: 'Returned list of auto suggestions'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    AnswerLinkId:
                      type: string
                      example: '138'
                    RecognitionId:
                      type: string
                      example: '65'
                    QuestionText:
                      type: string
                      example: 'Where can I find my transaction history?'
        400:
          description: 'error'
          content:
            application/json:
              examples:
                UNABLE_TO_GET_AUTO_SUGGESTION:
                  summary: 'Unable to get autosuggestion'
                  value:
                    code: '1904'
                    message: 'Unable to get autosuggestion.'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      description: 'Post an autosuggestion question for answer'
      tags:
        - virtual-assistant
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VAASRequest'
      responses:
        200:
          description: 'Returned the answer'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VAResponse'
        400:
          description: 'error'
          content:
            application/json:
              examples:
                UNABLE_TO_SUBMIT_AUTO_SUGGESTION:
                  summary: 'Unable to submit'
                  value:
                    code: '1905'
                    message: 'Unable to submit your autosuggest..'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /virtual-assistant/chat:
    post:
      description: 'Chat/Get help from virtual assistant. <span style="color: red">If recognition_id & answer_id present then its a faq type query. Else it''ll be a general chat type query.</span>'
      tags:
        - virtual-assistant
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VAASRequest'
      responses:
        200:
          description: 'Returned the virtual assiatant intance'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VAResponse'
        400:
          description: 'error'
          content:
            application/json:
              examples:
                UNABLE_TO_GET_RESPONSE_FAQ:
                  summary: 'Unable to get response'
                  value:
                    code: '1902'
                    message: 'Unable to get response for your FAQ.'
                UNABLE_TO_GET_ANSWER:
                  summary: 'Unable to get answer'
                  value:
                    code: '1903'
                    message: 'Unable to get response for your question..'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /virtual-assistant/chat/session:
    post:
      description: 'Create a chat session'
      tags:
        - virtual-assistant
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ident:
                  type: string
                  example: '0041515194314941916567'
                email:
                  type: string
                  example: 'meed.dummy@yopmail.com'
                firstName:
                  type: string
                  example: 'John'
                lastName:
                  type: string
                  example: 'Doe'
                timeZone:
                  type: string
                  example: 'Asia/Dhaka'
                userLocalTime:
                  type: string
                  example: '9:33 AM'
                language:
                  type: string
                  example: 'en_US'
      responses:
        200:
          description: 'Returned the virtual assiatant chat session'
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionID:
                    type: number
                    example: 1511
                  customerID:
                    type: number
                    example: 2
        400:
          description: 'Error'
          content:
            application/json:
              examples:
                UNABLE_TO_GET_CHAT_QUEUE:
                  summary: 'Unable to get chat queue'
                  value:
                    code: '1907'
                    message: 'Unable to get Chat Queue List'
                UNABLE_TO_GET_CHAT_REFRESH_TOKEN:
                  summary: 'Unable to get Chat token'
                  value:
                    code: '1908'
                    message: 'Unable to get Chat token'
                UNABLE_TO_CREATE_CHAT_SESSION:
                  summary: 'Unable to create Chat session'
                  value:
                    code: '1909'
                    message: 'Unable to create Chat session'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /virtual-assistant/chat/save:
    post:
      description: 'Save live chat session history'
      tags:
        - virtual-assistant
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ANI:
                  type: string
                  example: ''
                ReferenceID:
                  type: string
                  example: ''
                CustomerID:
                  type: string
                  example: ''
                Email:
                  type: string
                  example: 'meed.dummy@yopmail.com'
                FirstName:
                  type: string
                  example: 'John'
                LastName:
                  type: string
                  example: 'Doe'
                messages:
                  type: string
                  example: 'Some message'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /virtual-assistant/dialogue-tree:
    post:
      description: 'Post dialogue tree from session'
      tags:
        - virtual-assistant
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                DTreeRequestType:
                  type: string
                  example: ''
                Connector_ID:
                  type: string
                  example: ''
                DTREE_OBJECT_ID:
                  type: string
                  example: ''
                DTREE_NODE_ID:
                  type: string
                  example: ''
                ICS_SOURCE_ANSWER_ID:
                  type: string
                  example: ''
      responses:
        200:
          description: 'Returned something(!)'
          content:
            application/json:
              schema:
                type: object
                properties: {}
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /meed/members/:id/language:
    patch:
      description: 'Update language'
      tags:
        - settings-service
        - meed-service
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Member id
          example: '5c17349a8ca47446b6103696'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  type: string
                  example: 'es-mx'
      responses:
        200:
          description: 'Returned member info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        400:
          description: 'Error'
          content:
            application/json:
              examples:
                LANGUAGE_NOT_SUPPORTED:
                  summary: 'Language not supported'
                  value:
                    code: '1204'
                    message: 'Language not supported'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /deposit/fund:
    post:
      description: 'This service responsible for the direct deposit fund'
      tags:
        - deposit-service
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositFund'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositFundResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /deposit/money:
    post:
      description: 'This service responsible for the deposit money'
      tags:
        - deposit-service
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          example: alex
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositMoney'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositMoneyResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /deposit/check:
    post:
      description: 'This service responsible for the deposit check'
      tags:
        - deposit-service
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          example: axiomme
          required: true
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          example: alex
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositCheck'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositCheckResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /credentials/forgot-username:
    post:
      description: 'Forgot Username'
      tags:
        - bank-credential-service
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'meed.dummy@yopmail.com'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                type: string
                example: 'Username recovery done'
        500:
          $ref: '#/components/responses/InternalServerError'
  /credentials/forgot-password/challenge-questions:
    get:
      description: 'Get challenge questions to reset password'
      tags:
        - bank-credential-service
      parameters:
        - in: query
          name: username
          required: true
          description: The username
          example: 'meed.dummy'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-id
          required: false
          description: Otp id in header
          example: 'd3747e98-5ddc-42d5-9215-63795c63a882'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-token
          required: false
          description: Otp token sent via sms
          example: '879706'
          schema:
            type: string
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeQues'
        423:
          description: 'Account locked error'
          content:
            application/json:
              examples:
                ACCOUNT_LOCKED:
                  summary: 'Your account is locked'
                  value:
                    code: '405'
                    message: 'Your account is locked'
        403:
          description: 'Error'
          content:
            application/json:
              examples:
                ADDITIONAL_OTP_REQUIRED:
                  summary: 'OTP Required'
                  value:
                    code: '406'
                    message: 'Additional otp required'
                INVALID_OTP_TOKEN:
                  summary: 'Invalid OTP Token'
                  value:
                    code: '407'
                    message: 'Invalid token'
                TOO_MANY_ATTEMPTS:
                  summary: 'Too many attempts'
                  value:
                    code: '408'
                    message: 'Too many attempts'
                TOKEN_EXPIRED:
                  summary: 'OTP Token expired'
                  value:
                    code: '409'
                    message: 'OTP Token expired'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      description: 'Validate challenge questions'
      tags:
        - bank-credential-service
      parameters:
        - $ref: '#/components/parameters/BankIdentifier'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'dummy.meed'
                key:
                  type: string
                  example: '16cd9d7b-59b5-4d62-b164-5c51d0e01006'
                answers:
                  type: array
                  items:
                    properties:
                      id:
                        type: string
                        example: 'http://wso2.org/claims/challengeQuestion1'
                      answer:
                        type: string
                        example: '1990-06-30'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    example: '16cd9d7b-59b5-4d62-b164-5c51d0e01006'
        400:
          description: 'Invalid'
          content:
            application/json:
              examples:
                INCORRECT_ANSWER:
                  summary: 'Incorrect Answer'
                  value:
                    code: '403'
                    message: 'Your answer is incorrect'
        500:
          $ref: '#/components/responses/InternalServerError'

  /credentials/forgot-password/reset:
    post:
      description: 'Reset password with new password'
      tags:
        - bank-credential-service
      parameters:
        - $ref: '#/components/parameters/BankIdentifier'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'dummy.meed'
                key:
                  type: string
                  example: '16cd9d7b-59b5-4d62-b164-5c51d0e01006'
                password:
                  type: string
                  example: '7cccfa7e709112eee92af35594ffacf1e3f881de6d841cabfbd934b145ea56dc'
      responses:
        200:
          description: 'Password reset successfully'
          content:
            application/json:
              schema:
                type: string
                example: 'Successful operation - Password set'
        409:
          description: 'Used Password'
          content:
            application/json:
              examples:
                PASSWORD_USED_EARLIER:
                  summary: 'Used Password'
                  value:
                    code: '404'
                    message: 'This password has been used earlier. Please choose a different password.'
        500:
          $ref: '#/components/responses/InternalServerError'

  /offers:
    get:
      description: 'Get available affinity offers'
      tags:
        - affinity-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: header
          name: meedbankingclub-customerid
          required: true
          schema:
            type: string
            example: '0000006569'
      responses:
        200:
          description: 'Affinity Offers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AffinityOffer'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /offers/featured:
    get:
      description: 'Get available featured offers'
      tags:
        - affinity-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: header
          name: meedbankingclub-customerid
          required: true
          schema:
            type: string
            example: '0000006569'
      responses:
        200:
          description: 'Affinity featured Offers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AffinityOffer'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /offers/categories:
    get:
      description: 'Get list of Affinity Categories'
      tags:
        - affinity-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: header
          name: meedbankingclub-customerid
          required: true
          schema:
            type: string
            example: '0000006569'
        - in: header
          name: meedbankingclub-username
          required: true
          schema:
            type: string
            example: 'meed.dummy'
        - in: header
          name: meedbankingclub-memberid
          required: true
          schema:
            type: string
            example: '5da410f9801f2742a236c988'
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          schema:
            type: string
            example: 'axiomme'
      responses:
        200:
          description: 'Affinity Categories'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: string
                      example: '54062'
                    name:
                      type: string
                      example: 'Apparel & Accessories'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /offers/:offerid:
    get:
      description: 'Get an offers details'
      tags:
        - affinity-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: header
          name: meedbankingclub-customerid
          required: true
          schema:
            type: string
            example: '0000006569'
        - in: path
          name: offerid
          required: true
          schema:
            type: number
            example: 215859
      responses:
        200:
          description: 'Affinity Offer details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AffinityOfferDetails'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /offers/:offerid/activate:
    post:
      description: 'Activate an offer'
      tags:
        - affinity-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: header
          name: meedbankingclub-customerid
          required: true
          schema:
            type: string
            example: '0000006569'
        - in: path
          name: offerid
          required: true
          schema:
            type: number
            example: 215859
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: boolean
                  example: true
      responses:
        200:
          description: 'Offer Activated Successfully'
          content:
            application/json:
              schema: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /app-version:
    get:
      description: 'Get app version list'
      tags:
        - app-version
        - meed-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      responses:
        200:
          description: 'Version list'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppVersion'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      description: 'Create a app version'
      tags:
        - app-version
        - meed-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
                  example: '2.0.0'
                updateUrl:
                  type: string
                  example: 'https://meed.com'
                platform:
                  type: string
                  enum: ['ios', 'android']
                  example: 'android'
                checkUpgrade:
                  type: boolean
                  example: false
      responses:
        200:
          description: 'Version created Successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppVersion'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /app-version/:id:
    patch:
      description: 'Update an app version'
      tags:
        - app-version
        - meed-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '5de4f005a54e5143499971ee'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
                  example: '2.0.0'
                updateUrl:
                  type: string
                  example: 'https://meed.com'
                checkUpgrade:
                  type: boolean
                  example: false
      responses:
        200:
          description: 'Version updated Successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppVersion'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      description: 'Delete an app version'
      tags:
        - app-version
        - meed-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '5de4f005a54e5143499971ee'
      responses:
        204:
          description: 'Version deleted Successfully'
          content:
            application/json:
              schema: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /app-version/upgrade:
    get:
      description: 'Get app upgrade info'
      tags:
        - app-version
        - meed-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: query
          name: currentVersion
          required: true
          schema:
            type: string
            example: '1.0.0'
        - in: query
          name: platform
          required: true
          schema:
            type: string
            example: 'android'
      responses:
        200:
          description: 'Version update infp'
          content:
            application/json:
              schema:
                properties:
                  updateStatus:
                    type: string
                    enum: ['None', 'Soft', 'Force']
                    example: 'Soft'
                  updateUrl:
                    type: string
                    example: 'https://meed.com'
        404:
          description: 'No version for the platform'
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: 'App version not found for platform ios'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /logger/ui:
    patch:
      description: 'Log app ui data to loggly'
      tags:
        - logger-service
        - meed-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        204:
          description: 'Log success'
          content:
            application/json:
              schema: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /uas/email-channel:
    post:
      description: 'Register email address to email channel'
      summary: 'Register email address to email channel'
      tags:
        - urban-airship-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                channel:
                  type: object
                  properties:
                    type:
                      type: string
                      example: 'email'
                      enum:
                        - email
                    address:
                      type: string
                      example: 'meed0071@yopmail.com'
                    timezone:
                      type: string
                      example: 'America/Los_Angeles'
                    locale_country:
                      type: string
                      example: 'US'
                    locale_language:
                      type: string
                      example: 'en'
                    commercial_opted_in:
                      type: string
                      example: '2018-10-28T10:34:22'
      responses:
        200:
          description: 'Email chanel Registered'
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    example: true
                  channel_id:
                    type: string
                    example: 'ed83d48b-c418-44c2-998c-08eea4844478'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      description: 'Update Email channel'
      summary: 'Update Email channel'
      tags:
        - urban-airship-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                channel:
                  type: object
                  properties:
                    channelID:
                      type: string
                      example: 'ed83d48b-c418-44c2-998c-08eea4844478'
                    type:
                      type: string
                      example: 'email'
                      enum:
                        - email
                    address:
                      type: string
                      example: 'meed0071@yopmail.com'
                    commercial_opted_in:
                      example: '2018-10-28T10:34:22'
      responses:
        200:
          description: 'Email chanel updated'
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    example: true
                  channel_id:
                    type: string
                    example: 'ed83d48b-c418-44c2-998c-08eea4844478'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /uas/named-user:
    post:
      description: 'Associate a named user to email channel'
      summary: 'Associate a named user to email channel'
      tags:
        - urban-airship-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                channel_id:
                  type: string
                  example: 'ed83d48b-c418-44c2-998c-08eea4844478'
                named_user_id:
                  type: string
                  example: '0000006991'
                device_type:
                  type: string
                  example: 'ios'
      responses:
        200:
          description: 'Email chanel updated'
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    example: true
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      description: 'Lookup a named user details'
      summary: 'Lookup a named user details'
      tags:
        - urban-airship-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      parameters:
        - in: query
          name: namedUser
          required: true
          schema:
            type: string
            example: '0000006569'
      responses:
        200:
          description: 'Look up a Named user details'
          content:
            application/json:
              schema:
                properties:
                  tags:
                    type: array
                    items:
                      type: string
                      example: 'meed_push'
                  channelId:
                    type: string
                    example: 'ed83d48b-c418-44c2-998c-08eea4844478'
        404:
          description: 'No named user associated'
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                    example: '2400'
                  message:
                    type: string
                    example: 'Nameduser is not associated with any urban airship channel'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /uas/named-user/initial-tags:
    post:
      description: 'Add initial default tags to a named user'
      summary: 'Add initial tags to a named user'
      tags:
        - urban-airship-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                namedUser:
                  type: string
                  example: '0000006991'
                banks:
                  type: array
                  items:
                    type: string
                    example: 'axxiome'
      responses:
        200:
          description: 'Initial tags added'
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    example: true
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /uas/named-user/tags:
    post:
      description: 'Add a tag to a named user'
      summary: 'Add a tag to a named user'
      tags:
        - urban-airship-service
      security:
        - cookieAuth: []
          HeaderAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                namedUser:
                  type: string
                  example: '0000006991'
                tag:
                  type: string
                  example: 'meed_share'
      responses:
        200:
          description: 'Tag added'
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    example: true
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      description: 'Remove a tag'
      summary: 'Remove a tag'
      tags:
        - urban-airship-service
      security:
        - cookieAuth: []
          HeaderAuth: []

      responses:
        200:
          description: 'Tag removed'
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    example: true
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /meed/members/verify:
    post:
      description: 'Verify meeed member'
      tags:
        - 'p2p-service'
        - meed-service
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: 'meed@yopmail.com'
      responses:
        200:
          description: 'Returns valid members email list'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'meed@yopmail.com'
        500:
          $ref: '#/components/responses/InternalServerError'

  /contacts:
    post:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'Add iPay Contacts for External Transfer'
      description: ''
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'header'
          name: 'meedbankingclub-otp-id'
          description: 'Otp Id is required second time'
          required: false
          schema:
            type: string
            example: 'df43sdn324hs32w3oifn3423jnsdf'
        - in: 'header'
          name: 'meedbankingclub-otp-token'
          description: 'Otp Token is required second time'
          required: false
          schema:
            type: string
            example: '123456'
      requestBody:
        description: 'Put contact informations to add in ipay list'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'

      responses:
        200:
          description: return new added ipay contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  customerId:
                    type: string
                    example: '1'
                  email:
                    type: string
                    example: 'externalmeed@yopmail.com'
                  name:
                    type: string
                    example: 'EXTERNAL USER'
                  sharedSecret:
                    type: string
                    example: 'Super secret'
                  phone:
                    type: string
                    example: '3616410235'

        403:
          $ref: '#/components/responses/OTPResponse'
        400:
          $ref: '#/components/responses/ValidationException'
    get:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'Get all Contacts'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'header'
          name: 'meedbankingclub-memberid'
          schema:
            type: string
            example: '5c17349a8ca47446b6103696'
          required: true
      responses:
        200:
          description: 'contact response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    items:
                      type: object
                      properties:
                      $ref: '#/components/schemas/ContactResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /contacts/{id}:
    patch:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'Update Contacts'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'path'
          name: 'id'
          description: Id of contact that you want to update
          schema:
            type: string
            example: 1
          required: true
      requestBody:
        description: Request body to update contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactUpdate'

      responses:
        200:
          description: 'Return updated contact'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactUpdate'
        400:
          $ref: '#/components/responses/ValidationException'
        401:
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'Delete a Contact'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'path'
          name: 'id'
          required: true
          description: Id of contact that you want to delete
          schema:
            type: string
            example: 1
        - in: 'query'
          name: 'contactType'
          schema:
            type: string
            enum:
              - IPAY
              - MEED
            example: MEED
      responses:
        200:
          description: 'If deletion success then will return true otherwise false'
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      customerId:
                        type: string
                        example: '3'
                  - type: object
                    properties:
                      contactType:
                        type: string
                        example: 'MEED'
                      _id:
                        type: string
                        example: '5e43f5c94c12ac6fbf966dfe'
                      belongTo:
                        type: string
                        example: '5e0f38bd8546c550027daf73'
                      email:
                        type: string
                        example: 'microuser@yopmail.com'
                      createdAt:
                        type: string
                        example: '2020-02-12T12:55:37.030Z'
                      updatedAt:
                        type: string
                        example: '2020-02-12T12:55:37.030Z'
              examples:
                DELETE_IPAY_CONTACT:
                  value:
                    customerId: '3'
                DELETE_MEED_CONTACT:
                  value:
                    _id: '5e43f5c94c12ac6fbf966dfe'
                    contactType: 'MEED'
                    belongTo: '5e0f38bd8546c550027daf73'
                    email: 'microuser@yopmail.com'
                    createdAt: '2020-02-12T12:55:37.030Z'
                    updatedAt: '2020-02-12T12:55:37.030Z'

        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

  /fundrequests:
    get:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'Get all Fund Requests'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'header'
          name: 'meedbankingclub-memberid'
          schema:
            type: string
            example: '5e0094181dd4b86ff6a07bdd'
          required: true
      responses:
        200:
          description: 'fund request response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/FundRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'Create Fund Requests'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'header'
          name: 'meedbankingclub-memberid'
          schema:
            type: string
            example: '5e0094181dd4b86ff6a07bdd'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  senderEmail:
                    type: string
                    example: 'sender@email.com'
                  receiverEmail:
                    type: string
                    example: 'receiver@yopmail.com'
                  amount:
                    type: string
                    example: '10'
                  message:
                    type: string
                    example: 'Request Message'
      responses:
        200:
          description: 'Response for Fund Request api call'
          content:
            application/json:
              schema:
                type: object
                properties:
                  requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/FundRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /fundrequests/{id}:
    patch:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'Cancel or Decline Fund Request'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'header'
          name: 'meedbankingclub-memberid'
          schema:
            type: string
            example: '5e0094181dd4b86ff6a07bdd'
          required: true
        - in: 'path'
          name: 'id'
          schema:
            type: string
            description: request id
          required: true
      requestBody:
        description: To cancel Fund request. requestStatus MUST BE "CANCELLED" and To decline fund request requestStatus MUST BE "DECLINED"
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    requestStatus:
                      type: string
                      enum: ['CANCELLED', 'DECLINED']
                      example: 'CANCELLED'
                    senderEmail:
                      type: string
                      example: 'sender@yopmail.com'
                    receiverEmail:
                      type: string
                      example: 'receiver@yopmail.com'
                    amount:
                      type: string
                      example: '10'
                    message:
                      type: string
                      example: 'Request Message'
                    confirmationCode:
                      type: string
                      example: 'f90f8fa2-7f07-4ddb-82df-12f74c063c7a'
                - type: object
                  properties:
                    requestStatus:
                      type: string
                      enum: ['CANCELLED', 'DECLINED']
                      example: 'DECLINED'
                    senderEmail:
                      type: string
                      example: 'sender@yopmail.com'
                    receiverEmail:
                      type: string
                      example: 'receiver@yopmail.com'
                    amount:
                      type: string
                      example: '10'
                    message:
                      type: string
                      example: 'Request Message'
                    confirmationCode:
                      type: string
                      example: 'f90f8fa2-7f07-4ddb-82df-12f74c063c7a'
            examples:
              CANCEL_FUND_REQUEST:
                value:
                  requestStatus: 'CANCELLED'
                  senderEmail: 'sender@yopmail.com'
                  receiverEmail: 'receiver@yopmail.com'
                  amount: '10'
                  message: 'Request Message'
                  confirmationCode: 'f90f8fa2-7f07-4ddb-82df-12f74c063c7a'
              DECLINED_FUND_REQUEST:
                value:
                  requestStatus: 'DECLINED'
                  senderEmail: 'sender@yopmail.com'
                  receiverEmail: 'receiver@yopmail.com'
                  amount: '10'
                  message: 'Request Message'
                  confirmationCode: 'f90f8fa2-7f07-4ddb-82df-12f74c063c7a'

      responses:
        200:
          description: Response for update fund request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      request:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: '5e13304a30fe13483e813d3e'
                          requestStatus:
                            type: string
                            example: 'CANCELLED'
                          senderEmail:
                            type: string
                            example: 'sender@yopmail.com'
                          receiverEmail:
                            type: string
                            example: 'receiver@yopmail.com'
                          amount:
                            type: number
                            example: 4.95
                          message:
                            type: string
                            example: 'Check korar jonno dici $4.95'
                          confirmationCode:
                            type: string
                            example: 'd467161d-0b0e-4583-9150-2690a5ec383c'
                          createdAt:
                            type: string
                            example: '2020-01-06T13:04:10.078Z'
                          updatedAt:
                            type: string
                            example: '2020-01-06T13:05:24.119Z'
                  - type: object
                    properties:
                      request:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: '5e13304a30fe13483e813d3e'
                          requestStatus:
                            type: string
                            example: 'DECLINED'
                          senderEmail:
                            type: string
                            example: 'sender@yopmail.com'
                          receiverEmail:
                            type: string
                            example: 'receiver@yopmail.com'
                          amount:
                            type: number
                            example: 4.95
                          message:
                            type: string
                            example: 'Check korar jonno dici $4.95'
                          confirmationCode:
                            type: string
                            example: 'd467161d-0b0e-4583-9150-2690a5ec383c'
                          createdAt:
                            type: string
                            example: '2020-01-06T13:04:10.078Z'
                          updatedAt:
                            type: string
                            example: '2020-01-06T13:05:24.119Z'
              examples:
                CANCEL_FUND_REQUEST:
                  value:
                    request:
                      _id: '5e469d0e4674ff36f6b327f3'
                      senderEmail: 'apiusermeed@yopmail.com'
                      receiverEmail: 'apiusermeed1@yopmail.com'
                      amount: 10
                      requestStatus: 'CANCELLED'
                      message: 'message texts'
                      confirmationCode: 'f90f8fa2-7f07-4ddb-82df-12f74c063c7a'
                      createdAt: '2020-02-14T13:13:50.739Z'
                      updatedAt: '2020-02-14T13:14:37.854Z'

                DECLINED_FUND_REQUEST:
                  value:
                    request:
                      _id: '5e469d0e4674ff36f6b327f3'
                      senderEmail: 'apiusermeed@yopmail.com'
                      receiverEmail: 'apiusermeed1@yopmail.com'
                      amount: 10
                      requestStatus: 'DECLINED'
                      message: 'message texts'
                      confirmationCode: 'f90f8fa2-7f07-4ddb-82df-12f74c063c7a'
                      createdAt: '2020-02-14T13:13:50.739Z'
                      updatedAt: '2020-02-14T13:14:37.854Z'

        401:
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'Delete Fund Request'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'header'
          name: 'meedbankingclub-memberid'
          schema:
            type: string
            example: '5e0094181dd4b86ff6a07bdd'
          required: true
        - in: 'path'
          name: 'id'
          schema:
            type: string
            description: request id
          required: true
      responses:
        200:
          description: response for delete fund request
          content:
            application/json:
              schema:
                type: object
                properties:
                  request:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: '5e13304a30fe13483e813d3e'
                      requestStatus:
                        type: string
                        example: 'CANCELLED OR DECLINED OR PENDING OR ACCEPTED'
                      senderEmail:
                        type: string
                        example: 'sender@yopmail.com'
                      receiverEmail:
                        type: string
                        example: 'receiver@yopmail.com'
                      amount:
                        type: number
                        example: 4.95
                      message:
                        type: string
                        example: 'Check korar jonno dici $4.95'
                      confirmationCode:
                        type: string
                        example: 'd467161d-0b0e-4583-9150-2690a5ec383c'
                      createdAt:
                        type: string
                        example: '2020-01-06T13:04:10.078Z'
                      updatedAt:
                        type: string
                        example: '2020-01-06T13:05:24.119Z'
        401:
          $ref: '#/components/responses/Unauthorized'

  /p2p:
    post:
      tags:
        - 'p2p-service'
      security:
        - cookieAuth: []
      summary: 'P2P Transfer amount'
      description: All headers are required but only otp-id and otp-token not required for first time but it required for second time for p2p internal transfer.
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          schema:
            type: string
            example: 'bankname'
          required: true
        - in: 'header'
          name: 'meedbankingclub-customerid'
          schema:
            type: string
            example: '1245678'
          required: true
        - in: 'header'
          name: 'meedbankingclub-memberid'
          schema:
            type: string
            example: '5e0094181dd4b86ff6a07bdd'
          required: true
        - in: 'header'
          name: 'meedbankingclub-username'
          schema:
            type: string
            example: 'username'
          required: true
        - in: 'header'
          name: 'meedbankingclub-otp-id'
          schema:
            type: string
            example: '5e0094181dd4b86ff6a07bdd'
          required: false
        - in: 'header'
          name: 'meedbankingclub-otp-token'
          schema:
            type: string
            example: '123456'
          required: false
      requestBody:
        description: request body for p2p transfer
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/P2PInternalTransfer'
                - $ref: '#/components/schemas/P2PExternalTransfer'
            examples:
              INTERNAL_TRANSFER:
                value:
                  senderAccountId: '39DE99C123D44ADA89AC12D51AF9F92A'
                  senderEmail: 'sender@mail.com'
                  receiverEmail: 'receiver@mail.com'
                  amount: 10
                  message: 'Some Message or notes'
                  transferType: 'INTERNAL'

              EXTERNAL_TRANSER:
                value:
                  senderAccountId: '39DE99C123D44ADA89AC12D51AF9F92A'
                  senderEmail: 'sender@mail.com'
                  receiverEmail: 'receiver@mail.com'
                  amount: 10
                  receiverCustomerId: '1'
                  receiverCurrency: 'USD'
                  sharedSecret: 'Some Secret'
                  message: 'Some Message or notes'
                  transferType: 'EXTERNAL'

      responses:
        200:
          description: 'p2p transfer response'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/P2PInternalTransferResponse'
                  - $ref: '#/components/responses/P2PExternalTransferResponse'

              examples:
                Internal_Transfer_Response:
                  value:
                    _id: '5c17349a8ca47446b6103696'
                    senderEmail: 'sender@email.com'
                    receiverEmail: 'receiver@email.com'
                    amount: 10
                    message: 'Some message about payment or something else'
                    transferType: 'INTERNAL'
                    confirmationCode: 'BPC_Paymentp2p_6e803b4b-0518-42bb-a4e0-b666d4a27223'
                    createdAt: '2020-01-15T09:12:19.411Z'
                    updatedAt: '2020-01-15T09:12:19.411Z'

                External_Transfer_Response:
                  value:
                    confirmationCode: 'BPC_Paymentp2p_6e803b4b-0518-42bb-a4e0-b666d4a27223'
        403:
          $ref: '#/components/responses/OTPResponse'
        400:
          $ref: '#/components/responses/ValidationException'
        500:
          $ref: '#/components/responses/InternalServerError'

  /savings-goals:
    get:
      tags:
        - 'savings-goals'
      security:
        - cookieAuth: []
      summary: 'get saving goals'
      description: Get saving goals
      parameters:
        - in: 'header'
          name: 'meedbankingclub-memberid'
          required: true
          schema:
            type: string
            example: '5e0f38bd8546c550027daf73'
      responses:
        200:
          description: 'get sevings goals response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavingGoals'

        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - 'savings-goals'
      security:
        - cookieAuth: []
      summary: 'set saving goals'
      description: Set saving goals
      requestBody:
        description: Request body for set saving goals
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'MyGoal'
                targetAmount:
                  type: number
                  example: 1000
                startDate:
                  type: string
                  example: '2020-2-23T09:58:26Z'
                endDate:
                  type: string
                  example: '2021-2-22T09:58:26Z'
                yearOfSaving:
                  type: number
                  example: 1
                memberId:
                  type: string
                  example: '5e0f38bd8546c550027daf73'
      responses:
        200:
          description: 'get sevings goals response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavingGoals'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /savings-goals/{savings-goals-id}:
    patch:
      tags:
        - 'savings-goals'
      security:
        - cookieAuth: []
      summary: 'update saving goals'
      description: Update saving goals
      parameters:
        - in: 'path'
          name: 'savings-goals-id'
          required: true
          schema:
            type: string
            example: '5c17349a8ca47446b6103696'
        - in: 'header'
          name: 'meedbankingclub-memberid'
          required: true
          schema:
            type: string
            example: '5c17349a8ca47446b6103696'
      requestBody:
        description: Request body for set saving goals
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'MyGoal'
                targetAmount:
                  type: number
                  example: 1000
                startDate:
                  type: string
                  example: '2020-2-23T09:58:26Z'
                endDate:
                  type: string
                  example: '2021-2-22T09:58:26Z'
                yearOfSaving:
                  type: number
                  example: 1
                memberId:
                  type: string
                  example: '5e0f38bd8546c550027daf73'
      responses:
        200:
          description: 'update sevings goals response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavingGoals'

        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - 'savings-goals'
      security:
        - cookieAuth: []
      summary: 'update saving goals'
      description: Update saving goals
      parameters:
        - in: 'path'
          name: 'savings-goals-id'
          required: true
          schema:
            type: string
            example: '5c17349a8ca47446b6103696'
        - in: 'header'
          name: 'meedbankingclub-memberid'
          required: true
          schema:
            type: string
            example: '5c17349a8ca47446b6103696'
      responses:
        204:
          description: Delete savings goals response will return no content

        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /meedshare:
    get:
      tags:
        - meed-share
      summary: Get meed share related information
      description: Get meed share information for the user
      security:
        - cookieAuth: []
      parameters:
        - in: 'query'
          name: 'memberId'
          required: true
          schema:
            type: string
            example: '5c17349a8ca47446b6103696'
      responses:
        200:
          description: Get meed share response
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastMonthDistribution:
                    type: number
                    example: 0
                  totalDistribution:
                    type: number
                    example: 0
                  totalInvitees:
                    type: number
                    example: 0
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /bill-pay/payees:
    post:
      tags:
        - bill-pay-service
      summary: 'Add a payee'
      description: 'Add a payee'
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          description: Bank id
          example: 'axiomme'
          schema:
            type: string
        - in: header
          name: meedbankingclub-billpay-provider
          required: true
          description: Bank id
          example: 'IPAY'
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          description: User name
          example: 'meed.dummy'
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          required: true
          description: User customer id
          example: '0000006569'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-id
          required: false
          description: Otp sent from server
          example: 'c3bb2655-1aee-4177-9d03-950b41719f05'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-token
          required: false
          description: Otp code sent as sms
          example: '070501'
          schema:
            type: string
      requestBody:
        description: Request body for set saving goals
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - phone
                - type
                - street
                - postCode
                - city
                - state
                - accountNumber
              properties:
                fullName:
                  type: string
                  example: 'EXTERNAL USER'
                nickName:
                  type: string
                  example: 'EXTERNAL USER'
                phone:
                  type: string
                  example: '3616410235'
                type:
                  type: string
                  enum: ['Individual', Company]
                  example: 'Individual'
                street:
                  type: string
                  example: '210515'
                postCode:
                  type: string
                  example: '12222'
                city:
                  type: string
                  example: '3616410235'
                state:
                  type: string
                  example: 'AS'
                accountNumber:
                  type: string
                  example: '00000000200015877'
      responses:
        200:
          description: 'Add payee successful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  payeeId:
                    type: number
                    example: 8
                  fullName:
                    type: string
                    example: 'EXTERNAL USER'
                  phone:
                    type: string
                    example: '3616410235'
                  type:
                    type: string
                    enum: ['Individual', Company]
                    example: 'Individual'
                  street:
                    type: string
                    example: '210515'
                  postCode:
                    type: string
                    example: '12222'
                  city:
                    type: string
                    example: '3616410235'
                  state:
                    type: string
                    example: 'AS'
                  accountNumber:
                    type: string
                    example: '00000000200015877'
                  paymentMethodType:
                    type: string
                    enum: ['Electronic', Email]
                    example: 'Electronic'
        403:
          $ref: '#/components/responses/OTPResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - bill-pay-service
      summary: 'Get payee list'
      description: 'Get payee list'
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          description: Bank id
          example: 'axiomme'
          schema:
            type: string
        - in: header
          name: meedbankingclub-billpay-provider
          required: true
          description: Bank id
          example: 'IPAY'
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          description: User name
          example: 'meed.dummy'
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          required: true
          description: User customer id
          example: '0000006569'
          schema:
            type: string
      responses:
        200:
          description: 'Add payee successful'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    payeeId:
                      type: number
                      example: 8
                    fullName:
                      type: string
                      example: 'EXTERNAL USER'
                    nickName:
                      type: string
                      example: 'External User'
                    paymentMethodType:
                      type: string
                      enum: ['Electronic', Email]
                      example: 'Electronic'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /bill-pay/payees/:id:
    put:
      tags:
        - bill-pay-service
      summary: 'Edit a payee'
      description: 'Edit a payee'
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Payee Id
          example: 8
          schema:
            type: number
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          description: Bank id
          example: 'axiomme'
          schema:
            type: string
        - in: header
          name: meedbankingclub-billpay-provider
          required: true
          description: Bank id
          example: 'IPAY'
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          description: User name
          example: 'meed.dummy'
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          required: true
          description: User customer id
          example: '0000006569'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-id
          required: false
          description: Otp sent from server
          example: 'c3bb2655-1aee-4177-9d03-950b41719f05'
          schema:
            type: string
        - in: header
          name: meedbankingclub-otp-token
          required: false
          description: Otp code sent as sms
          example: '070501'
          schema:
            type: string
      requestBody:
        description: Request body for set saving goals
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - phone
                - type
                - street
                - postCode
                - city
                - state
                - accountNumber
              properties:
                fullName:
                  type: string
                  example: 'EXTERNAL USER'
                phone:
                  type: string
                  example: '3616410235'
                type:
                  type: string
                  enum: ['Individual', Company]
                  example: 'Individual'
                street:
                  type: string
                  example: '210515'
                postCode:
                  type: string
                  example: '12222'
                city:
                  type: string
                  example: '3616410235'
                state:
                  type: string
                  example: 'AS'
                accountNumber:
                  type: string
                  example: '00000000200015877'
      responses:
        200:
          description: 'Edit payee successful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  payeeId:
                    type: number
                    example: 8
                  fullName:
                    type: string
                    example: 'EXTERNAL USER'
                  phone:
                    type: string
                    example: '3616410235'
                  type:
                    type: string
                    enum: ['Individual', Company]
                    example: 'Individual'
                  street:
                    type: string
                    example: '210515'
                  postCode:
                    type: string
                    example: '12222'
                  city:
                    type: string
                    example: '3616410235'
                  state:
                    type: string
                    example: 'AS'
                  accountNumber:
                    type: string
                    example: '00000000200015877'
                  paymentMethodType:
                    type: string
                    enum: ['Electronic', Email]
                    example: 'Electronic'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - bill-pay-service
      summary: 'Get a payee detail'
      description: 'Get a payee detail'
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Payee Id
          example: 8
          schema:
            type: number
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          description: Bank id
          example: 'axiomme'
          schema:
            type: string
        - in: header
          name: meedbankingclub-billpay-provider
          required: true
          description: Bank id
          example: 'IPAY'
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          description: User name
          example: 'meed.dummy'
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          required: true
          description: User customer id
          example: '0000006569'
          schema:
            type: string
      responses:
        200:
          description: 'Get payee successful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  payeeId:
                    type: number
                    example: 8
                  fullName:
                    type: string
                    example: 'EXTERNAL USER'
                  phone:
                    type: string
                    example: '3616410235'
                  type:
                    type: string
                    enum: ['Individual', Company]
                    example: 'Individual'
                  accountNumber:
                    type: string
                    example: '00000000200015877'
                  paymentMethodType:
                    type: string
                    enum: ['Electronic', Email]
                    example: 'Electronic'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - bill-pay-service
      summary: 'Delet a payee'
      description: 'Delet a payee'
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Payee Id
          example: 8
          schema:
            type: number
        - in: header
          name: meedbankingclub-bank-identifier
          required: true
          description: Bank id
          example: 'axiomme'
          schema:
            type: string
        - in: header
          name: meedbankingclub-billpay-provider
          required: true
          description: Bank id
          example: 'IPAY'
          schema:
            type: string
        - in: header
          name: meedbankingclub-username
          required: true
          description: User name
          example: 'meed.dummy'
          schema:
            type: string
        - in: header
          name: meedbankingclub-customerid
          required: true
          description: User customer id
          example: '0000006569'
          schema:
            type: string
      responses:
        204:
          description: Delete payee success will return no content with 204
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      tags:
        - meed-service
      description: Health route to check if application live
      summary: Health to check application live
      responses:
        200:
          description: Success Response
          content:
            text/html:
              schema:
                type: string
                example: 'meed banking club service dev is healthy!'

  /accounts/{accountId}/statements:
    get:
      tags:
        - account-service
      summary: Get statements
      description: Get account statements
      security:
        - cookieAuth: []
      parameters:
        - in: 'path'
          name: 'accountId'
          required: true
          schema:
            type: string
            example: 'D6C3E5F8C7721EDA8BC412D51AF9F92A'
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          required: true
          schema:
            type: string
            example: 'mybank'

        - in: 'header'
          name: 'meedbankingclub-username'
          required: true
          schema:
            type: string
            example: 'myusername'

        - in: 'header'
          name: 'meedbankingclub-customerid'
          required: true
          schema:
            type: string
            example: '0000007314'

      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    statementId:
                      type: number
                      example: 32
                    accountId:
                      type: string
                      example: 'D6C3E5F8C7721EDA8BC412D51AF9F92A'
                    statementDate:
                      type: string
                      example: '2018-03-31'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /accounts/{accountId}/statements/{statementId}:
    get:
      tags:
        - account-service
      summary: Get statement details
      description: Get account statement details
      security:
        - cookieAuth: []
      parameters:
        - in: 'path'
          name: 'accountId'
          required: true
          schema:
            type: string
            example: 'D6C3E5F8C7721EDA8BC412D51AF9F92A'
        - in: 'path'
          name: 'statementId'
          required: true
          schema:
            type: string
            example: '32'
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          required: true
          schema:
            type: string
            example: 'mybank'

        - in: 'header'
          name: 'meedbankingclub-username'
          required: true
          schema:
            type: string
            example: 'myusername'

        - in: 'header'
          name: 'meedbankingclub-customerid'
          required: true
          schema:
            type: string
            example: '0000007314'

      responses:
        200:
          description: Success response will return pdf document in base64 encoded string
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: string
                    example: 'JVBERi0xLjIKJcCoo6ns6eLn8OTmoPazrrGgs6+ytK+ysLC5oMLl9PTl8qDN7/Xz5fTy4fCg..........'
                  type:
                    type: string
                    example: 'pdf'

        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /accounts/sweeps:
    get:
      tags:
        - 'account-service'
      security:
        - cookieAuth: []
      summary: 'Get Sweep Accunt State'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          required: true
          schema:
            type: string
            example: 'mybank'
        - in: 'header'
          name: 'meedbankingclub-username'
          required: true
          schema:
            type: string
            example: 'myusername'
      responses:
        200:
          description: 'Success Response will return sweep state'
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: 'activate'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - 'account-service'
      security:
        - cookieAuth: []
      summary: 'Update Sweep Accunt State'
      parameters:
        - in: 'header'
          name: 'meedbankingclub-bank-identifier'
          required: true
          schema:
            type: string
            example: 'mybank'
        - in: 'header'
          name: 'meedbankingclub-username'
          required: true
          schema:
            type: string
            example: 'myusername'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  enum: ['activate', 'deactivate']
                  example: 'deactivate'
      responses:
        200:
          description: 'Success Response will return updated sweep state'
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: 'deactivate'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/Unprocessable'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    AtmBankId:
      in: path
      name: bankId
      required: true
      description: Target bank id
      example: '5c17349a8ca47446b6103696'
      schema:
        type: string
    AtmDistance:
      in: query
      name: distance
      required: true
      description: Maximum distance from location to find search atms
      example: 100
      schema:
        type: number
    AtmLat:
      in: query
      name: latitude
      required: true
      description: Location latitude
      example: 16.0602137
      schema:
        type: number
    AtmLong:
      in: query
      name: longitude
      required: true
      description: Location longitude
      example: 108.212529
      schema:
        type: number
    AtmAddress:
      in: query
      name: address
      required: true
      description: Location address
      example: 'Maritime Bank Huế'
      schema:
        type: string
    AtmType:
      in: query
      name: locationType
      required: false
      description: Atm location type
      schema:
        type: string
        enum: ['Atm', 'BranchAtm', 'BranchCSO']
    AtmMesure:
      in: query
      name: unitOfMeasure
      required: false
      description: In which unit of measure provided
      schema:
        type: string
        enum: ['Imperial', 'Metric']
    BankIdentifier:
      in: header
      name: meedbankingclub-bank-identifier
      required: true
      description: Bank id
      example: 'axiomme'
      schema:
        type: string
  schemas:
    OnboardingCommonInfo:
      type: object
      properties:
        firstName:
          type: string
          example: 'Londo'
        secondName:
          type: string
          example: 'Jac'
        dateOfBirth:
          type: string
          example: '12/09/1990'
        paternalLastName:
          type: string
          example: 'Rio'
        maternalLastName:
          type: string
          example: 'Loo'
      required:
        - firstName
        - dateOfBirth
        - paternalLastName
    SavingGoals:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: '5e468969e49c74518c5b43a2'
          name:
            type: string
            example: 'My Goal'
          targetAmount:
            type: number
            example: 3200
          startDate:
            type: string
            example: '2020-10-23T09:58:26.000Z'
          endDate:
            type: string
            example: '2021-10-24T09:58:26.000Z'
          yearOfSaving:
            type: number
            example: 1
          memberId:
            type: string
            example: '5e0f38bd8546c550027daf73'
          createdDate:
            type: string
            example: '2020-02-14T11:50:01.468Z'
          updatedDate:
            type: string
            example: '2020-02-14T11:50:01.468Z'

    P2PInternalTransfer:
      type: object
      properties:
        senderAccountId:
          type: string
        senderEmail:
          type: string
        receiverEmail:
          type: string
        amount:
          type: number
        message:
          type: string
        transferType:
          type: string

    P2PExternalTransfer:
      type: object
      properties:
        senderAccountId:
          type: string
        senderEmail:
          type: string
        receiverEmail:
          type: string
        amount:
          type: number
        receiverCustomerId:
          type: string
        sharedSecret:
          type: string
        receiverCurrency:
          type: string
        message:
          type: string
        transferType:
          type: string

    Contact:
      type: object
      properties:
        name:
          type: string
          example: 'External User'
        nickName:
          type: string
          example: 'External User'
        phone:
          type: string
          example: '3616410235'
        email:
          type: string
          example: 'externalmeed@yopmail.com'
        sharedSecret:
          type: string
          example: 'Super secret'

    ContactUpdate:
      type: object
      properties:
        nickName:
          type: string
          example: 'External User'
        email:
          type: string
          example: 'externalmeed@yopmail.com'

    FundRequest:
      type: object
      properties:
        _id:
          type: string
          example: '5e0094181dd4b86ff6a07bdd'
        requestStatus:
          type: string
          example: 'PENDING'
        senderEmail:
          type: string
          example: 'user@yopmail.com'
        receiverEmail:
          type: string
          example: 'otheruser@yopmail.com'
        amount:
          type: number
          example: 10
        message:
          type: string
          example: 'Request message'
        confirmationCode:
          type: string
          example: 'ee209075-a45c-4dbb-ac8d-78642d21b0b5'
        createdAt:
          type: string
          example: '2019-12-23T10:16:56.409Z'
        updatedAt:
          type: string
          example: '2019-12-26T11:56:05.443Z'

    ContactResponse:
      type: object
      properties:
        customerId:
          type: string
          example: '1'
        email:
          type: string
          example: 'externalmeed@yopmail.com'
        name:
          type: string
          example: 'EXTERNAL USER'
        sharedSecret:
          type: string
          example: 'Super secret'
        phone:
          type: string
          example: '3616410235'
        contactType:
          type: string
          enum: ['IPAY', 'MEED']
          example: IPAY

    AppVersion:
      type: object
      properties:
        _id:
          type: string
          example: '5de4f00fa54e5143499971ef'
        version:
          type: string
          example: '2.0.0'
        updateUrl:
          type: string
          example: 'https://meed.com'
        platform:
          type: string
          enum: ['ios', 'android']
          example: 'android'
        checkUpgrade:
          type: boolean
          example: false
        createdDate:
          type: string
          example: '2019-12-02T10:02:06.458Z'
        updatedDate:
          type: string
          example: '2019-12-02T10:02:06.458Z'
    AffinityOfferDetails:
      allOf:
        - $ref: '#/components/schemas/AffinityStore'
        - $ref: '#/components/schemas/AffinityOffer'
    AffinityStore:
      type: object
      properties:
        stores:
          type: array
          items:
            properties:
              id:
                type: string
                example: '503064'
              address:
                type: string
                example: '945 Broadway St NE'
              city:
                type: string
                example: 'Minneapolis'
              zip:
                type: string
                example: '55413'
              lat:
                type: number
                example: 44.998748
              long:
                type: number
                example: -93.246707
              distance:
                type: number
                example: 10.8
    AffinityOffer:
      type: object
      properties:
        id:
          type: string
          example: '311405'
        activated:
          type: boolean
          example: false
        title:
          type: string
          example: '5% Cash Back'
        merchant:
          type: string
          example: '612 Brew'
        image:
          type: string
          example: 'https://uat.affinity-deals.com/common/images/image.png'
        shopType:
          type: string
          example: 'instore'
        tenWord:
          type: string
          example: 'Earn 5% Cash Back at 612 Brew.'
        twentyWord:
          type: string
          example: '<p>Offer expires 12-31-2019. Offers are subject to change. Rewards are earned based on the net price of eligible goods and services purchased. Rewards apply to purchases made at participating 612 Brew stores only. This offer cannot be combined with any other offer, coupon code(s), or promotion, unless available through this site.</p> Offer valid on 99 purchase(s) per month. Offer valid on up to $600 in monthly purchases.'
        outsideLink:
          type: string
          example: ''
        expiration:
          type: number
          example: 1577768400
        merchantId:
          type: string
          example: '72074'
        requiresActivation:
          type: boolean
          example: false
        offerValue:
          type: number
          example: 5
    ChallengeQues:
      type: object
      properties:
        key:
          type: string
          example: 'c78c03db-6475-4752-8b15-ae992db5129b'
        questions:
          type: array
          items:
            properties:
              id:
                type: string
                example: 'http://wso2.org/claims/challengeQuestion1'
              question:
                type: string
                example: 'What is your birth date?'
    VAASRequest:
      type: object
      properties:
        ident:
          type: string
          example: '3673080559314939883443'
        userlogid:
          type: string
          example: '2929002617'
        channel:
          type: string
          example: 'Root.App'
        business_area:
          type: string
          example: 'Root.English.Customer'
        entry:
          type: string
          example: 'Where can I find my transaction history?'
        recognition_id:
          type: string
          example: '131'
        answer_id:
          type: string
          example: '138'
    VARequest:
      type: object
      properties:
        ident:
          type: string
          example: '3673080559314939883443'
        userlogid:
          type: string
          example: '2929002617'
        channel:
          type: string
          example: 'Root.App'
        business_area:
          type: string
          example: 'Root.English.Customer'
        entry:
          type: string
          example: 'How can i?'
    VAResponse:
      type: object
      properties:
        session:
          $ref: '#/components/schemas/VASession'
        result:
          $ref: '#/components/schemas/VAResult'
        inteface:
          $ref: '#/components/schemas/VAInterface'
    VAResult:
      type: object
      properties:
        recognition_id:
          type: string
          example: '3'
        dialogue:
          $ref: '#/components/schemas/VADialogue'
        related_results_prompt:
          type: string
          example: ''
        disambiguation_items:
          type: array
          items:
            type: string
        related_results:
          type: array
          items:
            $ref: '#/components/schemas/VARelatedResult'
        chat_input:
          type: string
          example: 'activation code?'
        chat_response:
          type: array
          items:
            properties:
              text:
                type: string
                example: "Hmm...I don't know if I got that. Can you try again?"
              part_type:
                type: string
                example: 'normal'
        user_intent:
          type: string
          example: ''
        answer_id:
          type: string
          example: '4'
    VARelatedResult:
      type: object
      properties:
        recognition_id:
          type: string
          example: '54'
        question_text:
          type: string
          example: 'How do I activate my card?'
        target_object_type:
          type: string
          example: 'answer'
        generator:
          type: string
          example: 'semantic'
        answer_id:
          type: string
          example: '117'
    VADialogue:
      type: object
      properties:
        dtree_node_id:
          type: string
          example: ''
        back_text:
          type: string
          example: ''
        connectors:
          type: array
          items:
            properties:
              click_text:
                type: string
                example: ''
              connector_id:
                type: string
                example: ''
        dtree_id:
          type: string
          example: ''
        back_navigation:
          type: boolean
          example: false
    VASession:
      type: object
      properties:
        ident:
          type: string
          example: '3673080559314939883443'
        userlogid:
          type: string
          example: '2929002617'
        channel:
          type: string
          example: 'Root.App'
        business_area:
          type: string
          example: 'Root.English.Customer'
        section:
          type: string
          example: 'Root.English'
        transaction_count:
          type: number
          example: 1
    VAInterface:
      type: object
      properties:
        autocomplete:
          type: boolean
          example: true
        auto_submit_delay:
          type: number
          example: 40
        display_entry:
          type: boolean
          example: true
        ics_given:
          type: boolean
          example: false
        terminate_session:
          type: boolean
          example: false
        freetext:
          type: boolean
          example: true
        live_chat_queue:
          type: string
          example: ''
        auto_submit:
          type: boolean
          example: false
        suggested_entries:
          type: array
          items:
            type: string
            example: 'Where do I find the bank routing number?'
        livechat_requested:
          type: boolean
          example: false
    GeoJsonLocation:
      type: object
      properties:
        type:
          type: string
          example: 'Point'
        coordinates:
          type: array
          items:
            type: number
            example: 108.212529, 16.0602137
    GeoLatLng:
      type: object
      properties:
        latitude:
          type: number
          example: 16.0602137
        longitude:
          type: number
          example: 108.212529
    BankAtmReponse:
      type: object
      properties:
        _id:
          type: string
          example: '5862f5b757cdd5511e2239c2'
        bank:
          type: string
          example: '5c17349a8ca47446b6103696'
        location:
          $ref: '#/components/schemas/GeoLatLng'
        distance:
          type: number
          example: 3.85
        locationType:
          type: string
          example: 'BranchAtm'
        streetAddress:
          type: string
          example: '14B Lý Thường Kiệt,'
        locationName:
          type: string
          example: 'Maritime Bank Huế'
        phoneNumber:
          type: string
          example: '(0543) 981 111'
        city:
          type: string
          example: 'Santa Monica'
        zipCode:
          type: string
          example: '90401'
        state:
          type: string
          example: 'California'
        createdDate:
          type: string
          example: '2016-12-27T23:13:59.051Z'
        hours:
          type: array
          items:
            properties:
              lobbyHours:
                type: string
                example: '9:00 AM TO 10:00 PM'
              dayOfWeek:
                type: string
                example: 'Mon-Fri'
              _id:
                type: string
                example: '5745aae70f09dcb4170cdaec'
    TransferResponse:
      type: object
      properties:
        amount:
          type: number
          example: 4.0
        transferDate:
          type: string
          example: '2019-10-08T00:00:00.000-05:00'
        debtorAccount:
          type: string
          example: '4E1837598ABD1EE9B9B812D51AF9F92A'
        creditorAccount:
          type: string
          example: '00000000000053480'
        notes:
          type: string
          example: 'Some note'
        frequency:
          type: string
          example: 'Once'
        transferId:
          type: string
          example: '000000020778-MD01'
        currency:
          type: string
          example: 'USD'
        transferType:
          type: string
          example: 'Scheduled'
    InvitationResponse:
      type: object
      properties:
        inviter:
          type: string
          example: '5da59a096dd7b23300aeb006'
        member:
          type: string
          example: '5da4104f801f2742a236c986'
        inviteeEmail:
          type: string
          example: 'dummy.reminder.meed@yopmail.com'
        message:
          type: string
          example: 'Hi, you should join the Meed Banking Club!'
        expirationDate:
          type: string
          example: '2019-11-15T10:08:18.219Z'
        createdDate:
          type: string
          example: '2019-10-15T10:08:18.220Z'
        status:
          type: string
          example: SENT
        language:
          type: string
          example: 'en-us'

    SendInvitationResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: '5e216036cb9cf258e5650580'
          inviter:
            type: string
            example: '5e0091e59bc0afedb50344af'
          inviteeEmail:
            type: string
            example: SENT
          message:
            type: string
            example: 'Hi, you should join the Meed Banking Club'
          language:
            type: string
            example: 'en-us'
          expirationDate:
            type: string
            example: '2020-02-17T07:20:22.498Z'
          status:
            type: string
            example: SENT
          createdDate:
            type: string
            example: '2020-02-17T07:20:22.498Z'
          updatedDate:
            type: string
            example: '2020-02-17T07:20:22.498Z'
    OnboardingCreate:
      type: object
      required:
        - email
      properties:
        email:
          type: string

    GetStates:
      type: object
      properties:
        states:
          type: array
          items:
            $ref: '#/components/schemas/States'

    States:
      type: object
      properties:
        stateName:
          type: string
          example: New york
        stateAbv:
          type: string
          example: NY

    CreateLogin:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: 'invexuser'
        email:
          type: string
          example: 'invexuser@yopmail.com'
        password:
          type: string
          example: 'e309b7649e5448a2d65a180e9236f355e3201e781ee48f4bb87bfdcc76cac05c'

    CreateLoginResponse:
      type: object
      properties:
        _id:
          type: string
          example: '5d9afd16aae5ed216b9e5ff8'
        email:
          type: string
          example: 'invexuser@yopmail.com'
        username:
          type: string
          example: 'invexuser'
        customerId:
          type: string
          example: '00000000011'
    ValidateReferralByEmail:
      type: object
      properties:
        inviterEmail:
          type: string
          description: Inviter email address
          example: inviter@gmail.com
    ValidateReferralByCode:
      type: object
      properties:
        inviterCode:
          type: string
          description: Inviter code
          example: abc123
    OnboardingUpdateInviter:
      type: object
      required:
        - inviter
      properties:
        inviter:
          type: string
          description: Id of the inviter member
          example: abc123
    OnboardingUpdateUpdateNickname:
      type: object
      required:
        - id
        - nickname
      properties:
        id:
          type: string
          description: Id of the member to be updated
          example: abc123
        nickname:
          type: string
          description: inviters nickname
          example: ponyboy
    OnboardingUpdateCountry:
      type: object
      required:
        - id
        - country
      properties:
        id:
          type: string
          description: Id of the member to be updated
          example: abc123
        country:
          type: string
          description: country id of the member
          example: 123
    Member:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        username:
          type: string
        nickname:
          type: string
        applicationStatus:
          type: string
          enum:
            - not-started
            - started
            - on-hold
            - denied
            - completed
        applicationProgress:
          type: string
          enum:
            - email-signup
            - inviter
            - country
            - bank
        accountStatus:
          type: string
          enum:
            - opened
            - closed
            - in-progress
        country:
          type: string
        language:
          type: string
          example: 'en_US'
        inviter:
          type: string
        bank:
          type: string
        identifier:
          type: string
        createdDate:
          type: string
        updatedDate:
          type: string
    VerifyVerificationRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: member@meedbankingclub.com
        verificationCode:
          type: string
          example: 121232
    VerifyEmailVerificationCodeResponse:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
    Verification:
      type: object
      properties:
        id:
          type: string
          description: the id of this verification object
          example: 123
        validated:
          type: boolean
          description: whether this verification has been successfully validated by the user
          example: false
        numberOfTries:
          type: string
          description: The number of attempts remaining on this verification
          example: 3
        activationCode:
          type: string
          description: The code which has been sent and will be used to verify the user
          example: 293842
    SecurityQuestions:
      type: object
      properties:
        questions:
          type: array
          items:
            properties:
              question:
                type: string
                example: City where you were born?
              id:
                type: string
                example: 'http://wso2.org/claims/challengeQuestion1'
              order:
                type: number
                example: 1
    SecurityQuestionsAnswers:
      type: object
      properties:
        questions:
          type: array
          items:
            properties:
              questionId:
                type: string
              answer:
                type: string
    TermsAndConditions:
      type: object
      properties:
        documents:
          type: array
          items:
            properties:
              title:
                type: string
              pdf:
                type: string
    GetTransactions:
      type: object
      properties:
        postedTransactions:
          type: array
          items:
            $ref: '#/components/schemas/Transactions'
        pendingTransactions:
          type: array
          items:
            $ref: '#/components/schemas/PendingTransactions'
    CardDetails:
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
    Card:
      type: object
      properties:
        cardId:
          type: string
          example: '1234567'
        cardNumber:
          type: string
          example: '4242424242424242'
        isCardActive:
          type: boolean
          example: true

    Transactions:
      type: object
      properties:
        transactionType:
          type: string
          example: 'Credit P2P Transfer'
        amount:
          type: number
          example: 10
        notes:
          type: string
          example: 'Credit P2P Transfer'
        dateTime:
          type: string
          example: '2019-09-25T04:12:12+0000'
        referenceNumber:
          type: string
          example: '12D51AF9F92A1EE9B9B27F3BBD63849A'
        fromAccount:
          type: string
          example: '00000009000000105'
        toAccount:
          type: string
          example: '00000000000023951'
        status:
          type: string
          example: 'Booked'
        city:
          type: string
          example: 'Tulsa'
        state:
          type: string
          example: 'OK'
        country:
          type: string
          example: 'US'
    PendingTransactions:
      type: object
      properties:
        transactionType:
          type: string
          example: 'Credit P2P Transfer'
        amount:
          type: number
          example: 10
        notes:
          type: string
          example: 'Credit P2P Transfer'
        dateTime:
          type: string
          example: '2019-09-25T04:12:12+0000'
        referenceNumber:
          type: string
          example: '12D51AF9F92A1EE9B9B27F3BBD63849A'
        fromAccount:
          type: string
          example: '00000009000000105'
        toAccount:
          type: string
          example: '00000000000023951'
        status:
          type: string
          example: 'Pending'
        city:
          type: string
          example: 'Tulsa'
        state:
          type: string
          example: 'OK'
        country:
          type: string
          example: 'US'
    GetAccountSummaryResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    AccountId:
      type: object
      required:
        - accountNumber
        - accountType
      properties:
        accountNumber:
          type: string
          example: '00000000000000001'
        accountId:
          type: string
          example: '255D0A3022ED1EEA93C812D51AF9F92A'
        accountType:
          $ref: '#/components/schemas/AccountType'
    AccountType:
      type: string
      enum:
        - DDA
        - SSA
        - LOC
    AccountLock:
      type: object
      required:
        - isHold
      properties:
        isHold:
          type: boolean
          example: false
          description: Indicates whether there is a hold on this account.
    Account:
      allOf:
        - $ref: '#/components/schemas/AccountId'
        - $ref: '#/components/schemas/AccountLock'
        - properties:
            balancedOwed:
              type: number
              description: the amount owed on this account
            currentBalance:
              type: number
              description: the current balance of the account
            holdBalance:
              type: number
              description: the amount of the balance currently on hold
            availableBalance:
              type: number
              description: the available balance of the account
            minimumDue:
              type: number
              description: the minimum amount currently due on the account
            interestEarned:
              type: number
              example: 0
            status:
              description: status depends on account status and account Lock status. Default value will be 'Active'
              type: string
              example: Active
              enum:
                - Active
                - Inactive
                - Dormant
                - Frozen
                - CreditsOnly
                - ChargeOff
            routingNumber:
              type: string
              example: 1234234

    BankApplication:
      type: object
      properties:
        memberApplication:
          type: object
          properties:
            email:
              type: string
            prefix:
              type: string
            firstName:
              type: string
            middleName:
              type: string
            lastName:
              type: string
            dateOfBirth:
              type: string
            addressLine1:
              type: string
            addressLine2:
              type: string
            city:
              type: string
            mobilePhone:
              type: string
            workPhone:
              type: string
            zipCode:
              type: string
            state:
              type: string
            identityType:
              type: string
            identityNumber:
              type: string
            socialSecurityNo:
              type: string
            appliedRecognitionScore:
              type: string
            country:
              type: string
            occupation:
              type: string
            isRelatedToArmedForces:
              type: string
            armedForcesMemberFirstName:
              type: string
            armedForcesMemberLastName:
              type: string
            armedForcesSocialSecurityPin:
              type: string
            armedForcesDob:
              type: string
            sourceOfIncome:
              type: string
            monthlyWithdrawal:
              type: string
            monthlyDeposit:
              type: string
            monthlyIncome:
              type: number
            workPhoneExtension:
              type: string
        scannedIdData:
          type: object
          properties:
            reference:
              type: string
            extractionMethod:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            dateOfBirth:
              type: string
            gender:
              type: string
            addressLine:
              type: string
            postCode:
              type: string
            city:
              type: string
            subdivision:
              type: string
            country:
              type: string
            identificationType:
              type: string
            idNumber:
              type: string
            issuingCountry:
              type: string
            issuingDate:
              type: string
            expiryDate:
              type: string

    IdentityQuestions:
      type: object
      properties:
        questions:
          type: array
          items:
            properties:
              id:
                type: string
                example: 16819236
              question:
                type: string
                example: 'What type of residence is 222333 PEACHTREE PLACE?'
              availableAnswers:
                type: array
                items:
                  properties:
                    answer:
                      type: string
                      example: 'Single Family Residence'
                    id:
                      type: string
                      example: 16811044
    IdentityQuestionsRequestBody:
      type: object
      properties:
        questions:
          type: object
          properties:
            questionId:
              type: string
            answerId:
              type: string
    BankRegistrationFeeResponse:
      type: object
      required:
        - deposits
      properties:
        paymentTrackingID:
          type: string
    RegistrationFee:
      type: object
      properties:
        deposits:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/AccountId'
            properties:
              amount:
                type: number
        currency:
          type: string
        totalAmount:
          type: number
        paymentMethod:
          type: string
        paymentTrackingId:
          type: string
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: 'myyourname'
        password:
          type: string
          example: 'myPassWord123'
    LoginResponse:
      type: object
      properties:
        token:
          description: JWT token
          type: string

    BankCustomer:
      type: object
      properties:
        nickName:
          type: string
          example: PonyBoy
          description: nickname of the customers
        salutation:
          type: string
          example: Mr.
        firstName:
          type: string
          example: Pony
        middleName:
          type: string
          example: M
        lastName:
          type: string
          example: Mr.
        email:
          type: string
          example: abc@gmail.com
        dateOfBirth:
          type: string
          example: '2010-09-22'
        address:
          type: string
          description: Address line 1 containing Street name and address number
          example: '1234 MyStreet'
        city:
          type: string
          description: city
          example: 'My City'
        state:
          type: string
          description: state
          example: 'My State'
        zipCode:
          type: string
          description: zipcode for US addresses
          example: 'my zip'
        country:
          type: string
          description: user country
          example: 'US'
        mobilePhone:
          type: string
          example: 3105551212
        workPhone:
          type: string
          example: 3105551212
    CreateInternalTransferResponse:
      type: object
      properties:
        confirmationId:
          type: string
          description: confirmation id of the created transfer
    Transfer:
      type: object
      properties:
        debtorAccount:
          $ref: '#/components/schemas/AccountId'
        creditorAccount:
          $ref: '#/components/schemas/AccountId'
        amount:
          type: number
          description: The amount to be transferred
        currency:
          type: string
          enum:
            - USD
            - MX
        trackingId:
          type: string
          description: any tracking id used to track this Transfer
        notes:
          type: string
          description: any notes associated with this transfer.
    LoginAndGetAccounts:
      allOf:
        - properties:
            accounts:
              type: array
              items:
                $ref: '#/components/schemas/Account'
        - $ref: '#/components/schemas/LoginResponse'
    ChangeEmail:
      type: object
      properties:
        Data:
          type: object
          properties:
            email:
              type: string
    ChangeContactAddress:
      type: object
      properties:
        Address:
          type: object
          properties:
            address:
              type: string
            zipCode:
              type: number
            city:
              type: string
            countrySubdivision:
              type: string
            country:
              type: string
    ChangeCustomerName:
      type: object
      properties:
        salutation:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
    ChangeNickname:
      type: object
      properties:
        nickname:
          type: string
    ChangeContactNumber:
      type: object
      properties:
        mobilePhone:
          type: number
        workPhone:
          type: number
    ChangeContactPreference:
      type: object
      properties:
        type:
          type: string
        status:
          type: string
    optResponse:
      type: object
      properties:
        httpCode:
          type: number
        message:
          type: string
        code:
          type: number
    ChangeEmailReq:
      type: object
      properties:
        email:
          type: string
    ChangeContactAddressReq:
      type: object
      properties:
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: number
    ChangeCustomerNameReq:
      type: object
      properties:
        salutation:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
        oldName:
          type: string
        email:
          type: string
        reason:
          type: string
        requiredDocument:
          type: string
        frontIdImage:
          type: string
          format: binary
        backIdImage:
          type: string
          format: binary
        documentImage:
          type: string
          format: binary
    ChangeNicknameReq:
      type: object
      properties:
        nickname:
          type: string
    ChangeContactNumberReq:
      type: object
      properties:
        mobilePhone:
          type: number
        workPhone:
          type: number
    ChangeContactPreferenceReq:
      type: object
      properties:
        status:
          type: boolean
        type:
          type: string
    DepositFund:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        accountNumber:
          type: string
        bankRoutingNumber:
          type: string
        businessName:
          type: string
    DepositFundResponse:
      type: object
      properties:
        message:
          type: string
    DepositMoney:
      type: object
      properties:
        checkingAmount:
          type: string
        currency:
          type: string
        paymentMethod:
          type: string
        paymentTrackingID:
          type: string
        savingAmount:
          type: string
        totalAmount:
          type: string
    DepositMoneyResponse:
      type: object
      properties:
        processId:
          type: string
    DepositCheck:
      type: object
      properties:
        amount:
          type: string
        currency:
          type: string
        depositDate:
          type: string
        notes:
          type: string
        accountNumber:
          type: string
        deviceKey:
          type: string
        deviceDescription:
          type: string
        frontCheckImage:
          type: string
          format: byte
        backCheckImage:
          type: string
          format: byte
    DepositCheckResponse:
      type: object
      properties:
        depositCheckConfirmationNumber:
          type: string
        processingStatus:
          type: boolean
  responses:
    P2PInternalTransferResponse:
      description: P2P Internal Transfer Response
      content:
        application/json:
          schema:
            type: object
            properties:
              _id:
                type: string
              senderEmail:
                type: string
              receiverEmail:
                type: string
              amount:
                type: number
              message:
                type: string
              transferType:
                type: string
                enum: ['INTERNAL', 'EXTERNAL']
              confirmationCode:
                type: string
              createdAt:
                type: string
              updatedAt:
                type: string

    P2PExternalTransferResponse:
      description: P2P External Transfer Response
      content:
        application/json:
          schema:
            type: object
            properties:
              confirmationCode:
                type: string

    ContactResponse:
      description: Contacts response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContactResponse'
    BadRequest:
      description: HTTP 400 Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    OTPResponse:
      description: HTTP 403 Forbidden But OTP ID will be return in header
      headers:
        meedbankingclub-otp-id:
          description: 'OTP ID will be return'
          schema:
            type: 'string'

      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/responses/ADDITIONAL_OTP_REQUIRED'
              - $ref: '#/components/responses/INVALID_OTP_TOKEN'
              - $ref: '#/components/responses/TOO_MANY_ATTEMPTS'
              - $ref: '#/components/responses/TOO_MANY_ATTEMPTS'
          examples:
            ADDITIONAL_OTP_REQUIRED:
              value:
                data:
                  code: '702'
                  message: 'Additional OTP authorization required'
                  httpCode: 403
            INVALID_OTP_TOKEN:
              value:
                data:
                  code: '704'
                  message: 'Invalid token'
                  httCode: 403
            TOO_MANY_ATTEMPTS:
              value:
                data:
                  code: '705'
                  message: 'Too many attempts'
                  httCode: 403
            TOKEN_EXPIRED:
              value:
                data:
                  code: '706'
                  message: 'OTP Token expired'
                  httCode: 403

    ADDITIONAL_OTP_REQUIRED:
      description: Additional OTP Error Message
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  code:
                    type: string
                    example: '702'
                  message:
                    type: string
                    example: 'Additional OTP authorization required'
                  httpCode:
                    type: string
                    example: '403'

    INVALID_OTP_TOKEN:
      description: Error response for invalid otp
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: '704'
              message:
                type: string
                example: 'Invalid token'

    TOO_MANY_ATTEMPTS:
      description: Error response for OTP too many attempts
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: '705'
              message:
                type: string
                example: 'Too many attempts'

    TOKEN_EXPIRED:
      description: Error Response for expired token
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: '706'
              message:
                type: string
                example: 'OTP Token expired'

    Forbidden:
      description: HTTP 403 Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: HTTP 500 Unspecified server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: HTTP 404 The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: HTTP 401 Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unprocessable:
      description: HTTP 422 Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationException:
      description: ValidationException
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  examples:
    MeedMemberExample:
      summary: example of a meed member data object
      value:
        id: 12341
        email: member@meedbankingclub.com
        inviter: inviter@meedbankingclub.com
    IdentityQuestionsExample:
      summary: Identity verification questions the user must answer to identify themselves
      value:
        identityQuestions:
          - id: 1
            question: 'What type of residence is 222333 PEACHTREE PLACE?'
            answers:
              - answer: 'house'
                id: 1
              - answer: 'apartment'
                id: 2
          - id: 2
            question: 'What type of car do you own'
            answers:
              - answer: 'toyota'
                id: 1
              - answer: 'honda'
                id: 2
    OnboardingUpdateInviterExample:
      summary: Inviter
      value:
        inviter: '5da08c531ecaec7998f08c0f'
    OnboardingUpdateNicknameExample:
      summary: update member nickname
      value:
        nickname: ponyboy
    OnboardingUpdateCountryExample:
      summary: update inviters contry
      value:
        country: 123423
    InitialP2PTransferOtpRequest:
      summary: Initial P2P transfer otp code
      value:
        message: Additional OTP authorization required
        opCode: 00
        otpId: '90aa7eba-06fa-4046-9037-9982775cdcff'
    InitialP2PConfirmation:
      summary: Initial P2P transfer confirmation code
      value:
        p2pTrackingID: '4d6575b1-1951-4afd-a4ad-4b10d6020970'
        senderP2PConfirmationCode: 'BPC_Paymentp2p_d029f275-d1b5-4a28-954c-5aeb0809545e'
    ChangeEmailExample:
      summary: Change email address responses
      value:
        email: abc@yopmail.com
    ChangeCustomerNameExample:
      summary: Change customer name responses
      value:
        salutation: MR.
        firstName: ALex
        middleName: Kumar
        lastName: Roy
        dateOfBirth: 21/02/1990
    ChangeContactNumberExample:
      summary: Change contact number responses
      value:
        mobilePhone: +12323213132
        workPhone: +23432423432
    ChangeNicknameExample:
      summary: Change customer nick userName
      value:
        nickname: Alexder
    ChangeContactAddressExample:
      summary: Change contact address responses
      value:
        address: 14th lakestreet, usa
        zipCode: 12321
        city: Newyork
        countrySubdivision: US
        country: USA
    ChangeEmailExampleReq:
      summary: Update email request
      value:
        email: meed900june1@yopmail.com
    ChangeContactAddressExampleReq:
      summary: Update contact address request
      value:
        address: 1234 Commodore DriveDhka BD 1
        city: Washington
        state: SC
        zipCode: 123456
    ChangeContactNumberExampleReq:
      summary: Update contact number request
      value:
        mobilePhone: +14242784876
        workPhone: +14242784876
    ChangeCustomerNameExampleReq:
      summary: Update customer name request
      value:
        salutation: Mr.
        firstName: Alex
        middleName: Kumar
        lastName: Roy
        dateOfBirth: 21/02/1990
        oldName: Josep mac
        email: example@yopmail.com
        reason: divorse
        requiredDocument: docs
        frontIdImage: file
        backIdImage: file
        documentImage: file
    ChangeNicknameExampleReq:
      summary: Update customer nickname request
      value:
        nickname: Jorden
    ChangeContactPreferenceExampleReq:
      summary: Update contact preference
      value:
        status: false
        type: push
  links: {}
  callbacks: {}
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: authToken
